import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java-library'
}

project.ext.schemaTargetDir = new File("$buildDir/generated-sources")
testJar.enabled = true

configurations {
    xjc
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', "${buildDir}/generated-sources"]
    }
}

dependencies {
    api 'org.apache.santuario:xmlsec:2.2.3'
    api "org.bouncycastle:bcpkix-jdk15on:${bouncyCastleVersion}"
    api 'org.apache.commons:commons-lang3:3.12.0'
    api 'commons-io:commons-io:2.11.0'
    api "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    api 'org.apache.james:apache-mime4j-core:0.8.7'
    api "org.glassfish.jaxb:jaxb-runtime:$jaxbVersion"
    api 'com.sun.xml.messaging.saaj:saaj-impl:1.5.3'
    api 'com.sun.activation:jakarta.activation:1.2.2'
    api "org.eclipse.jetty:jetty-server:$jettyVersion"
    api 'org.apache.httpcomponents:httpclient:4.5.13'
    api 'org.apache.httpcomponents:httpasyncclient:4.1.4'

    api "org.scala-lang:scala-library:2.13.9"
    api "com.typesafe.akka:akka-actor_$akkaVersion"
    api "com.typesafe.akka:akka-remote_$akkaVersion"
    api "com.typesafe.akka:akka-slf4j_$akkaVersion"

    api platform("com.fasterxml.jackson:jackson-bom:${jacksonBomVersion}")
    api "com.fasterxml.jackson.core:jackson-databind"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    api 'com.google.code.gson:gson:2.9.0'
    api "com.google.guava:guava:$guavaVersion"

    api "io.vavr:vavr:$vavrVersion"

    api ('org.quartz-scheduler:quartz:2.3.2') {
        exclude module: 'c3p0'
    }

    api ('org.apache.commons:commons-configuration2:2.8.0') {
        exclude group: 'org.apache.commons', module: 'commons-text'
    }
    api 'org.apache.commons:commons-text:1.10.0'

    implementation "ch.qos.logback:logback-classic:${logbackVersion}"

    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation project(':common-test')

    xjc "org.glassfish.jaxb:jaxb-xjc:$jaxbVersion"
    xjc "org.glassfish.jaxb:jaxb-runtime:$jaxbVersion"
}

test {
    jvmArgs '-Djava.library.path=../lib'
}

task createDirs() {
    doLast {
        project.ext.schemaTargetDir.mkdirs()
    }
}

task xjc() {
    inputs.files fileTree(dir: 'src/main/resources', include: '*.xsd')
    outputs.dir schemaTargetDir

    doLast {
    ant.taskdef(name: 'xjc',
        classname: 'com.sun.tools.xjc.XJCTask',
        classpath: configurations.xjc.asPath)

    // Generate classes for identifiers
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.identifier',
        schema: 'src/main/resources/identifiers.xsd'
    )

    // Generate classes for message, using identifier classes
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.message',
        schema: 'src/main/resources/message.xsd',
        binding: 'src/main/resources/identifiers-bindings.xml'
    )

    // Generate classes for federateable global external conf
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.conf.globalconf.sharedparameters.v2',
        schema: 'src/main/resources/globalconf/shared-parameters.xsd',
        binding: 'src/main/resources/identifiers-bindings.xml'
    )

    // Generate classes for federateable global internal conf
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.conf.globalconf.privateparameters.v2',
        schema: 'src/main/resources/globalconf/private-parameters.xsd',
        binding: 'src/main/resources/identifiers-bindings.xml'
    )

    // Generate classes for request, using identifier classes
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.request',
        schema: 'src/main/resources/request.xsd',
        binding: 'src/main/resources/identifiers-bindings.xml'
    )

    // Generate classes for hash chains
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.hashchain',
        schema: 'src/main/resources/hashchain.xsd',
    )

    // Generate classes for service metainfo
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.metadata',
        schema: 'src/main/resources/service-metainfo.xsd',
        binding: 'src/main/resources/identifiers-bindings.xml'
    )
    }
}

if (Os.isName("linux")) {
    task make(type: Exec) {
        def javaCompiler = javaToolchains.compilerFor(java.toolchain)
        def javaHome = javaCompiler.get().metadata.installationPath.asFile.absolutePath

        inputs.dir fileTree(dir: '../passwordstore', includes: ['*.c', '*.h', 'Makefile'])
        inputs.dir file("${javaHome}/include")
        outputs.dir file('../lib')

        workingDir '../'
        commandLine 'make', 'clean', 'all'
    }

    task makeClean(type: Exec) {
        workingDir '../'
        commandLine 'make', 'clean'
    }

    classes.dependsOn make
    clean.dependsOn makeClean
}

licenseFormatTest {
    outputs.upToDateWhen { false }
}

xjc.dependsOn createDirs
compileJava.dependsOn xjc

task licenseFormatJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
}

task licenseTestJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
    check = true
}

licenseFormatMain.enabled = false
licenseMain.enabled = false

licenseFormat.dependsOn licenseFormatJava
licenseTest.dependsOn licenseTestJava

def gitCommitHash() {
    def cmd = "git show -s --format=git%h --abbrev=7"
    def hash = null
    try {
      def proc = cmd.execute()
      hash = proc.text.trim()
    } catch (Exception e) {
      println("Could not execute git command: " + e.message)
      hash = null
    }
    return hash
}

def gitCommitDate() {
    def cmd = "git show -s --format=%cd --date=format-local:%Y%m%d%H%M%S"
    def date = null
    try {
        def proc = cmd.execute(["TZ=UTC"], projectDir)
        date = proc.text.trim()
    } catch (Exception e) {
        println("Could not execute git command: " + e.message)
        date = null
    }
    return date
}

processResources {
    filter(ReplaceTokens, tokens: [version: xroadVersion, buildType: xroadBuildType, gitCommitDate: gitCommitDate(), gitCommitHash: gitCommitHash()])
}
