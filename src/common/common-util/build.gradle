import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java-library'
}

testJar.enabled = true

dependencies {
    api project(':common:common-domain')
    //FIXME review dependencies
    api 'org.apache.santuario:xmlsec:2.2.6'
    api "org.bouncycastle:bcpkix-jdk15on:$bouncyCastleVersion"
    api 'org.apache.commons:commons-lang3:3.13.0'
    api 'commons-io:commons-io:2.13.0'
    api "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    api 'org.apache.james:apache-mime4j-core:0.8.7'
    api "org.glassfish.jaxb:jaxb-runtime:$jaxbVersion" //TODO might not need whole runtime
    api 'com.sun.xml.messaging.saaj:saaj-impl:3.0.2'
    api 'com.sun.activation:jakarta.activation:2.0.1'
    api "org.eclipse.jetty:jetty-server:$jettyVersion"
    api 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
    api 'org.apache.httpcomponents:httpclient:4.5.14'
    api 'org.apache.httpcomponents:httpasyncclient:4.1.5'

    api platform("com.fasterxml.jackson:jackson-bom:$jacksonBomVersion")
    api "com.fasterxml.jackson.core:jackson-databind"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    api "com.google.guava:guava:$guavaVersion"

    api "io.vavr:vavr:$vavrVersion"

    api('org.quartz-scheduler:quartz:2.3.2') {
        exclude module: 'c3p0'
    }

    api('org.apache.commons:commons-configuration2:2.8.0') {
        exclude group: 'org.apache.commons', module: 'commons-text'
    }
    api "org.apache.commons:commons-text:$commonsTextVersion"
    compileOnly("jakarta.servlet:jakarta.servlet-api:$jakartaServletApiVersion")

    implementation "ch.qos.logback:logback-classic:$logbackVersion"

    testImplementation project(':common:common-test')
    testImplementation "org.assertj:assertj-core:$assertjVersion"
}

test {
    jvmArgs '-Djava.library.path=../../lib'
}

if (Os.isName("linux")) {
    task make(type: Exec) {
        def javaCompiler = javaToolchains.compilerFor(java.toolchain)
        def javaHome = javaCompiler.get().metadata.installationPath.asFile.absolutePath

        inputs.dir fileTree(dir: '../../passwordstore', includes: ['*.c', '*.h', 'Makefile'])
        inputs.dir file("${javaHome}/include")
        outputs.dir file('../../lib')

        workingDir '../../'
        commandLine 'make', 'clean', 'all'
    }

    task makeClean(type: Exec) {
        workingDir '../../'
        commandLine 'make', 'clean'
    }

    classes.dependsOn make
    clean.dependsOn makeClean
}

licenseFormatTest {
    outputs.upToDateWhen { false }
}

def gitCommitHash() {
    def cmd = "git show -s --format=git%h --abbrev=7"
    def hash = null
    try {
        def proc = cmd.execute()
        hash = proc.text.trim()
    } catch (Exception e) {
        println("Could not execute git command: " + e.message)
        hash = null
    }
    return hash
}

def gitCommitDate() {
    def cmd = "git show -s --format=%cd --date=format-local:%Y%m%d%H%M%S"
    def date = null
    try {
        def proc = cmd.execute(["TZ=UTC"], projectDir)
        date = proc.text.trim()
    } catch (Exception e) {
        println("Could not execute git command: " + e.message)
        date = null
    }
    return date
}

processResources {
    filter(ReplaceTokens, tokens: [version: xroadVersion, buildType: xroadBuildType, gitCommitDate: gitCommitDate(), gitCommitHash: gitCommitHash()])
}
