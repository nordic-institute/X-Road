import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java-library'
}

/**
 * This is xroad core library. It should only contain dependencies that are relevant to all xroad modules.
 */
dependencies {
    api platform("com.fasterxml.jackson:jackson-bom:$jacksonBomVersion")

    api "com.fasterxml.jackson.core:jackson-databind"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    api("org.slf4j:jcl-over-slf4j:$slf4jVersion")
    api("org.apache.santuario:xmlsec:$xmlsecVersion")
    api("org.apache.commons:commons-lang3:$commonsLang3Version")
    api("org.apache.commons:commons-text:$commonsTextVersion")
    api("org.bouncycastle:bcpkix-jdk18on:$bouncyCastleVersion")
    api("com.google.guava:guava:$guavaVersion")
    api("com.fasterxml.jackson.core:jackson-annotations:$jacksonBomVersion")
    api("commons-io:commons-io:$commonsIOVersion")
    api("org.apache.commons:commons-configuration2:$commonsConfiguration2Version") {
        exclude group: 'org.apache.commons', module: 'commons-text'
    }
    api("org.apache.httpcomponents.client5:httpclient5:$httpClient5Version")

    api("jakarta.inject:jakarta.inject-api:$jakartaInjectApiVersion")
    api("jakarta.xml.bind:jakarta.xml.bind-api:$jakartaBindApiVersion")
    api("jakarta.xml.soap:jakarta.xml.soap-api:$jakartaSoapApiVersion")
    api("jakarta.servlet:jakarta.servlet-api:$jakartaServletApiVersion")

    implementation "ch.qos.logback:logback-classic:$logbackVersion"

    testImplementation project(':common:common-test')
}

def gitCommitHash() {
    def cmd = "git show -s --format=git%h --abbrev=7"
    def hash = null
    try {
        def proc = cmd.execute()
        hash = proc.text.trim()
    } catch (Exception e) {
        println("Could not execute git command: " + e.message)
        hash = null
    }
    return hash
}

def gitCommitDate() {
    def cmd = "git show -s --format=%cd --date=format-local:%Y%m%d%H%M%S"
    def date = null
    try {
        def proc = cmd.execute(["TZ=UTC"], projectDir)
        date = proc.text.trim()
    } catch (Exception e) {
        println("Could not execute git command: " + e.message)
        date = null
    }
    return date
}

processResources {
    filter(ReplaceTokens, tokens: [version: xroadVersion, buildType: xroadBuildType, gitCommitDate: gitCommitDate(), gitCommitHash: gitCommitHash()])
}
