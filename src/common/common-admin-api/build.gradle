plugins {
    id 'java-library'
    id 'io.spring.dependency-management'
    id 'org.springframework.boot'
    id 'org.openapi.generator' version "$openApiGeneratorVersion"
    id 'org.niis.xroad.oasvalidatorplugin'
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', "build/generated-sources/openapi/src/main/java"]
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    api project(':common:common-domain')
    implementation project(':common:common-core')
    implementation project(':signer-protocol')
    implementation project(':serverconf')

    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation('io.micrometer:micrometer-tracing-bridge-brave')
    implementation("org.kohsuke:libpam4j:$libpam4jVersion")
    implementation("io.swagger.parser.v3:swagger-parser-v3:$swaggerParserVersion")
    implementation("io.swagger.core.v3:swagger-annotations:$swaggerAnnotationsVersion")

    testImplementation project(':common:common-test')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation("org.hsqldb:hsqldb:$hsqldbVersion")

    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    implementation('jakarta.validation:jakarta.validation-api')
    implementation("org.apache.tika:tika-core:$tikaVersion")

    api("com.github.ben-manes.caffeine:caffeine")
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$projectDir/src/main/resources/common-openapi-definition.yaml"
    outputDir = "${layout.buildDirectory.get().asFile}/generated-sources/openapi"
    apiPackage = "org.niis.xroad.restapi.openapi"
    modelPackage = "org.niis.xroad.restapi.openapi.model"
    globalProperties = [
        modelDocs              : "false",
        apis                   : "",
        models                 : "", // must use empty strings instead of "true":
        // https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin
        generateSupportingFiles: "false"
    ]
    configOptions = [
        useJakartaEe         : "true",
        interfaceOnly        : "true",
        useTags              : "true",
        documentationProvider: "none",
        skipDefaultInterface : "true",
        openApiNullable      : "false"
    ]
}

// Fix up to date check
tasks.openApiGenerate {
    inputs.files(openApiGenerate.inputSpec)
    outputs.dir(openApiGenerate.outputDir)
}

compileJava.dependsOn tasks.openApiGenerate

apiValidationParameters.apiDefinitionPaths = [
    "$projectDir/src/main/resources/common-openapi-definition.yaml".toString()
]

validateApiDefinitions {
    inputs.files("src/main/resources/common-openapi-definition.yaml")
    outputs.upToDateWhen { true }
}

tasks.openApiGenerate.dependsOn 'validateApiDefinitions'
