buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.16.1') {
            exclude group: 'org.springframework', module: 'spring-core'
        }
    }
}

plugins {
  id 'org.sonarqube' version '4.2.1.3168'
  id 'org.owasp.dependencycheck' version '8.4.0'
  id 'jacoco'
  id 'java'
  id 'idea'
  id "io.spring.dependency-management" version "${springDependenciesVersion}" apply false
  id 'org.springframework.boot' version "${springBootVersion}" apply false
  id 'com.google.protobuf' version "$protobufGradleVersion" apply false
  id 'org.siouan.frontend-jdk17' version "$frontendPluginVersion" apply false
}

repositories {
    mavenCentral()
}

sonarqube {
    properties {
        property "sonar.host.url", "${sonarqubeHost}"
        property "sonar.projectKey", "${sonarqubeProjectKey}"
        property "sonar.organization", "${sonarqubeOrganization}"
        property "sonar.projectName", "X-Road"
        property "sonar.projectDescription", "Data Exchange Layer"
        property "sonar.projectVersion", xroadVersion
        property "sonar.dependencyCheck.reportPath", "build/reports/owasp-dependency-check/dependency-check-report.xml"
        property "sonar.dependencyCheck.htmlReportPath", "build/reports/owasp-dependency-check/dependency-check-report.html"
        property "sonar.exclusions", "**/build/generated-sources/**"
        property "sonar.coverage.jacoco.xmlReportPaths", "${rootProject.buildDir}/reports/jacoco/test/jacocoTestReport.xml"

        property "sonar.issue.ignore.multicriteria", "e1"
        //# ignore 'Local-Variable Type Inference should be used"
        property "sonar.issue.ignore.multicriteria.e1.ruleKey", "java:S6212"
        property "sonar.issue.ignore.multicriteria.e1.resourceKey", "**/*.java"
    }
}

dependencyCheck {
    outputDirectory = "${project.buildDir}/reports/owasp-dependency-check"
    suppressionFile = "${project.rootDir}/dependencycheck-suppressions.xml"
    format = "ALL"
    skipProjects = [
        ":e2e-tests",
        ":central-server:admin-service:ui-system-test",
        ":central-server:admin-service:int-test",
        ":central-server:management-service:int-test"
    ]
    analyzers {
        experimentalEnabled = false
        archiveEnabled = false
        jarEnabled = true
        centralEnabled = false
        bundleAuditEnabled = false
        nexusEnabled = false
        nuspecEnabled = false
        opensslEnabled = false
        msbuildEnabled = false
        assemblyEnabled = false
        pyDistributionEnabled = false
        pyPackageEnabled = false
        rubygemsEnabled = false
        cmakeEnabled = false
        autoconfEnabled = false
        composerEnabled = false
        nodeEnabled = false
        nodeAudit {
            enabled = false
            yarnEnabled = false
        }
        ossIndex {
            enabled = false
        }
    }
}

group = 'ee.ria.xroad'
subprojects {
    group = "${parent.group}.${name.replace(/\W/,"_")}"
}

allprojects {
    buildscript {
        repositories {
            mavenCentral()
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    version = '1.0'

    jacoco {
        toolVersion = "0.8.7"
    }

    task allDependencies(type: DependencyReportTask) {}

    task printDeps {
        doLast {
            if (configurations.hasProperty("runtime")) {
                configurations.runtime.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
                    println "${project.name}:${dep.module.id.group}:${dep.module.id.name}:${dep.module.id.version}"
                }
            }
        }
    }
}

//Configure java projects
configure(subprojects.findAll { !["shared-ui", "ui"].contains(it.name) }) {

    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    version = '1.0'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    sourceSets {
        intTest {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
    }

    configurations {
        testArtifacts.extendsFrom testRuntime

        intTestImplementation.extendsFrom implementation
        intTestRuntimeOnly.extendsFrom runtimeOnly
    }

    dependencies {
        //With require constraints we define lowest compliant dependency version (transitive dependencies are incl.)
        constraints {
            add('implementation', 'com.fasterxml.jackson.core:jackson-databind') {
                because("Vulnerability fix regarding CVE-2022-42003")
                version {
                    require("$jacksonBomVersion")
                }
            }
            add('implementation', 'org.yaml:snakeyaml') {
                because("Vulnerability fix regarding CVE-2022-25857")
                version {
                    require("$snakeyamlVersion")
                }
            }
            add('implementation', 'org.apache.commons:commons-text') {
              because("Vulnerability fix regarding CVE-2022-42889")
              version {
                require("$commonsTextVersion")
              }
            }
            add('implementation', 'com.fasterxml.woodstox:woodstox-core') {
                because("Vulnerability fix regarding CVE-2022-40152")
                version {
                    require("$woodstoxVersion")
                }
            }
        }

        testImplementation 'org.hamcrest:hamcrest:2.2'
        testImplementation 'org.hamcrest:hamcrest-library:2.2'

        testImplementation("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
        testImplementation("org.junit.vintage:junit-vintage-engine:$junitVersion")

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        intTestCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        intTestAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }

  test {
    useJUnitPlatform()
  }

    task testJar(type: Jar) {
        classifier 'test'
        from sourceSets.test.output
    }

    def javaCompiler = javaToolchains.compilerFor(java.toolchain)
    def javaHome = javaCompiler.get().metadata.installationPath.asFile.absolutePath

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    tasks.withType(JavaExec) {
        systemProperty 'file.encoding', 'UTF-8'
        javaLauncher = javaToolchains.launcherFor(java.toolchain)
        if (project.hasProperty("args")) {
            args = project.getProperty("args").tokenize()
        }
    }

    tasks.withType(Test) {
        systemProperty 'file.encoding', 'UTF-8'
    }

    tasks.withType(Exec) {
        environment "JAVA_HOME", javaHome
        environment "JAVA_TOOL_OPTIONS", '-Dfile.encoding=UTF-8'
    }

    testJar.enabled = false

    artifacts {
        testArtifacts testJar
    }

    checkstyle {
        toolVersion = "10.7.0"
        configDirectory = file("${project.rootDir}/config/checkstyle")
        ignoreFailures = false
        showViolations = false
        enableExternalDtdLoad = true
    }

    checkstyleMain {
        source = fileTree('src/main/java')
        configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    }

    checkstyleTest {
        source = fileTree('src/test/java')
        configFile = file("${project.rootDir}/config/checkstyle/checkstyle-test.xml")
    }

    jacocoTestReport {
        enabled = false
    }

    apply plugin: 'com.github.hierynomus.license'

    license {
        header rootProject.file('LICENSE.txt')
        include '**/*.java'
        skipExistingHeaders = true
      mapping {
        java = 'SLASHSTAR_STYLE'
      }
    }

    licenseMain.source = fileTree('src/main')
    licenseTest.source = fileTree('src/test')
    licenseFormatMain.source = fileTree('src/main')
    licenseFormatTest.source = fileTree('src/test')

    jar {
        from rootProject.file('LICENSE.txt')
        duplicatesStrategy = DuplicatesStrategy.WARN
    }
}

//Configure frontend projects
//apply from: "${rootDir}/build-frontend-subprojects.gradle"
import org.siouan.frontendgradleplugin.infrastructure.gradle.RunYarn
// Gradle script that is applied on frontend subprojects (namely ui,shared-ui)

configure(subprojects.findAll { ["shared-ui", "ui"].contains(it.name) }) {
  apply plugin: 'org.siouan.frontend-jdk17'

  frontend {
    nodeVersion = frontendNodeVersion
    nodeInstallDirectory = file("${rootDir}/.gradle/yarn-node/${frontendNodeVersion}")
    cacheDirectory = file("${projectDir}/.gradle/yarn-cache")
    maxDownloadAttempts = 3
    if (System.getenv().containsKey("CI")) {
      installScript='install --immutable'
    }
  }

  tasks.register('checkFrontAudit', RunYarn) {
    dependsOn assembleFrontend
    inputs.files(
      'package.json',
      'yarn.lock'
    )
    outputs.files("${buildDir}/reports/audit-ci.txt")
    script = 'run npx-check-audit'
  }

  // check that yarn run license-check passes
  tasks.register('checkFrontLicense', RunYarn) {
    dependsOn assembleFrontend
    inputs.files("LICENSE.txt", "test/", "public/",fileTree('src/') {
      exclude 'openapi-types'
    })
    outputs.upToDateWhen { true }
    script = 'run license-check'
  }

  if (project.hasProperty('frontend-npm-audit')) {
    assemble.dependsOn checkFrontAudit
  }

  checkFrontend.dependsOn checkFrontLicense
}


clean.delete << "${rootDir}/packages/build"

jacocoTestReport {
    def javaProjects = subprojects.findAll { it.plugins.hasPlugin(JavaPlugin) }
    dependsOn javaProjects.check
    reports {
        xml.required = true
    }
    classDirectories.setFrom files(javaProjects.sourceSets.main.java.classesDirectory)
    sourceDirectories.setFrom files(javaProjects.sourceSets.main.java.srcDirs)
    executionData.setFrom fileTree(dir: '.', include: "**/build/jacoco/*.exec")
}

tasks.withType(Jar).configureEach {
    enabled = false
}

//Register git-hooks
tasks.register("installGitHooks", Copy) {
    from file("$rootDir/../.githooks")
    into file("$rootDir/../.git/hooks")
    fileMode 0775
}
assemble.dependsOn installGitHooks
