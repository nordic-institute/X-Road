buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.16.1') {
            exclude group: 'org.springframework', module: 'spring-core'
        }
    }
}

plugins {
    id 'org.sonarqube' version '3.3'
    id 'org.owasp.dependencycheck' version '6.5.3'
    id 'jacoco'
    id 'java'
    id 'idea'
    id "io.spring.dependency-management" version "1.0.11.RELEASE" apply false
    id 'org.springframework.boot' version "${springBootVersion}" apply false
    id "com.dorongold.task-tree" version "2.1.0"
}

repositories {
    mavenCentral()
}

def getRubySourceCheckCommand(def projectPath) {
    return ["$rootDir/check_ruby_source.sh", "$projectPath"]
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarqube.niis.org"
        property "sonar.projectKey", "xroad"
        property "sonar.projectName", "X-Road"
        property "sonar.projectDescription", "Data Exchange Layer"
        property "sonar.projectVersion", xroadVersion
        property "sonar.dependencyCheck.reportPath", "build/reports/owasp-dependency-check/dependency-check-report.xml"
        property "sonar.dependencyCheck.htmlReportPath", "build/reports/owasp-dependency-check/dependency-check-report.html"
        property "sonar.exclusions", "**/build/generated-sources/**"
        property "sonar.coverage.jacoco.xmlReportPaths", "${rootProject.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

dependencyCheck {
    outputDirectory = "${project.buildDir}/reports/owasp-dependency-check"
    suppressionFile = "${project.rootDir}/dependencycheck-suppressions.xml"
    format = "ALL"
    skipProjects = [":e2e-tests"]
    analyzers {
        experimentalEnabled = false
        archiveEnabled = false
        jarEnabled = true
        centralEnabled = false
        bundleAuditEnabled = true
        nexusEnabled = false
        nuspecEnabled = false
        assemblyEnabled = false
        pyDistributionEnabled = false
        pyPackageEnabled = false
        rubygemsEnabled = false
        cmakeEnabled = false
        autoconfEnabled = false
        composerEnabled = false
        nodeEnabled = false
        nodeAudit {
          enabled = false
        }
        ossIndex {
          enabled = false
        }
    }
}

allprojects {
    ext['snakeyaml.version'] = '1.31'
    buildscript {
      repositories {
        mavenCentral()
      }
    }

    repositories {
      mavenLocal()
      mavenCentral()
    }

    group = 'ee.ria.xroad'
    version = '1.0'

    jacoco {
        toolVersion = "0.8.7"
    }

    task allDependencies(type: DependencyReportTask) {}

    task printDeps {
        doLast {
            if (configurations.hasProperty("runtime")) {
                configurations.runtime.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
                    println "${project.name}:${dep.module.id.group}:${dep.module.id.name}:${dep.module.id.version}"
                }
            }
        }
    }
}

configure(subprojects.findAll { !["shared-ui"].contains(it.name) }) {

    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    group = 'ee.ria.xroad'
    version = '1.0'

    sourceSets {
        intTest {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
    }

    configurations {
        testArtifacts.extendsFrom testRuntime

        intTestImplementation.extendsFrom implementation
        intTestRuntimeOnly.extendsFrom runtimeOnly
    }

    dependencies {
        testImplementation 'org.hamcrest:hamcrest:2.2'
        testImplementation 'org.hamcrest:hamcrest-library:2.2'
        testImplementation 'junit:junit:4.13.2'

        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        intTestCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        intTestAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }

    task testJar(type: Jar) {
        classifier 'test'
        from sourceSets.test.output
    }

    java {
      toolchain {
          languageVersion = JavaLanguageVersion.of(8)
      }
    }

    def javaCompiler = javaToolchains.compilerFor(java.toolchain)
    def javaHome = javaCompiler.get().metadata.installationPath.asFile.absolutePath

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    tasks.withType(JavaExec) {
        javaLauncher = javaToolchains.launcherFor(java.toolchain)
        if (project.hasProperty("args")) {
            args = project.getProperty("args").tokenize()
        }
    }

    tasks.withType(Exec) {
        environment "JAVA_HOME", javaHome
    }

    test {
        if (java.toolchain.languageVersion.get() == JavaLanguageVersion.of(8)) {
            //workaround for JDK-8156584
            systemProperty("java.security.properties",
                "${project.rootDir}/config/workaround-jdk-8156584-security.properties");
        }
    }

    testJar.enabled = false

    artifacts {
        testArtifacts testJar
    }

    checkstyle {
        toolVersion = "8.44"
        configDirectory = file("${project.rootDir}/config/checkstyle")
        configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        ignoreFailures = false
        showViolations = false
    }

    checkstyleMain {
        source = fileTree('src/main/java')
    }

    checkstyleTest {
        source = fileTree('src/test/java')
    }

    jacocoTestReport {
        enabled = false
    }

    apply plugin: 'com.github.hierynomus.license'

    license {
        header rootProject.file('LICENSE.txt')
        include '**/*.java'
        include '**/*.rb'
        skipExistingHeaders = true
    }

    jar {
        from rootProject.file('LICENSE.txt')
    }

    //compileJava {
    //    options.compilerArgs << '-Xlint:deprecation'
    //}

}

configure(subprojects.findAll { it.name.contains('center-') or it.name.contains('common-ui') }) {

    apply plugin: 'com.github.hierynomus.license'

    def sources = (fileTree('app') + fileTree('etc') + fileTree('config') + fileTree('test'))

    task licenseFormatUi(type: nl.javadude.gradle.plugins.license.License) {
        source = sources
    }

    task licenseFormatUiCheck(type: nl.javadude.gradle.plugins.license.License) {
        source = sources
        check = true;
    }

    licenseFormat.dependsOn licenseFormatUi
    licenseTest.dependsOn licenseFormatUiCheck
}

configure(subprojects.findAll({ it.name.contains('center-common') or it.name.contains('common-ui') })) {
    def licenseSourceAdds = fileTree('lib')

    task licenseFormatLib(type: nl.javadude.gradle.plugins.license.License) {
        source += licenseSourceAdds
    }

    task licenseFormatLibCheck(type: nl.javadude.gradle.plugins.license.License) {
        source += licenseSourceAdds
        check = true
    }

    licenseFormat.dependsOn licenseFormatLib
    licenseTest.dependsOn licenseFormatLibCheck

}

clean.delete << "${rootDir}/packages/build"

jacocoTestReport {
    def javaProjects = subprojects.findAll{it.plugins.hasPlugin(JavaPlugin)}
    dependsOn javaProjects.check
    reports {
        xml.required = true
    }
    classDirectories.setFrom files(javaProjects.sourceSets.main.java.classesDirectory)
    sourceDirectories.setFrom files(javaProjects.sourceSets.main.java.srcDirs)
    executionData.setFrom fileTree(dir: '.', include: '**/build/jacoco/*.exec')
}
