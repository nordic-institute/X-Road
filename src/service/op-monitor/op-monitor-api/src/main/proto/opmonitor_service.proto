/*
 * The MIT License
 * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)
 * Copyright (c) 2018 Estonian Information System Authority (RIA),
 * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)
 * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
syntax = "proto3";

package org.niis.xroad.opmonitor.api;

import "common_messages.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;

service OpMonitorService {
  rpc GetOperationalDataIntervals(GetOperationalDataIntervalsReq) returns (GetOperationalDataIntervalsResp) {}
}

message GetOperationalDataIntervalsReq {
  int64 recordsFrom = 1;
  int64 recordsTo = 2;
  int32 intervalInMinutes = 3;
  optional SecurityServerType securityServerType = 4;
  optional ClientIdProto member_id = 5;
  optional ServiceIdProto service_id = 6;
}

enum SecurityServerType {
  SECURITY_SERVER_TYPE_UNSPECIFIED = 0;
  CLIENT = 1;
  PRODUCER = 2;
}

message GetOperationalDataIntervalsResp {
  repeated OperationalDataIntervalProto operationalDataInterval = 1;
}

message OperationalDataIntervalProto {
  google.protobuf.Timestamp timeIntervalStart = 1;
  int64 successCount = 2;
  int64 failureCount = 3;
}
