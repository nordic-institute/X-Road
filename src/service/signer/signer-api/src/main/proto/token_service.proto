/*
 * The MIT License
 * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)
 * Copyright (c) 2018 Estonian Information System Authority (RIA),
 * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)
 * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
syntax = "proto3";

package org.niis.xroad.signer.proto;

import "common_messages.proto";
import "tokens.proto";
import "token_status_info.proto";

option java_multiple_files = true;

service TokenService {
  rpc GetTokenById(GetTokenByIdReq) returns (TokenInfoProto) {}

  rpc GetTokenByKey(GetTokenByKeyIdReq) returns (TokenInfoProto) {}

  rpc GetTokenAndKeyIdByCertRequestId(GetTokenByCertRequestIdReq) returns (TokenInfoAndKeyIdProto) {}

  rpc GetTokenAndKeyIdByCertHash(GetTokenByCertHashReq) returns (TokenInfoAndKeyIdProto) {}

  rpc ListTokens(Empty) returns (ListTokensResp) {}

  rpc ActivateToken(ActivateTokenReq) returns (Empty) {}

  rpc SetTokenFriendlyName(SetTokenFriendlyNameReq) returns (Empty) {}

  rpc GetTokenBatchSigningEnabled(GetTokenBatchSigningEnabledReq) returns (GetTokenBatchSigningEnabledResp){}

  rpc InitSoftwareToken(InitSoftwareTokenReq) returns (Empty) {}

  rpc UpdateSoftwareTokenPin(UpdateSoftwareTokenPinReq) returns (Empty) {}

  rpc GetHSMOperationalInfo(Empty) returns (GetHSMOperationalInfoResp) {}

  rpc GetMemberSigningInfo(GetMemberSigningInfoReq) returns (GetMemberSigningInfoResp) {}
}

message ListTokensResp {
  repeated TokenInfoProto tokens = 1;
}

message ActivateTokenReq{
  string token_id = 1;
  bool activate = 2;
}

message GetTokenByIdReq {
  string token_id = 1;
}

message GetTokenByKeyIdReq {
  string key_id = 1;
}

message GetTokenByCertRequestIdReq {
  string cert_request_id = 1;
}

message GetTokenByCertHashReq {
  string cert_hash = 1;
}

message SetTokenFriendlyNameReq {
  string token_id = 1;
  string friendly_name = 2;
}

message GetTokenBatchSigningEnabledReq {
  string key_id = 1;
}

message GetTokenBatchSigningEnabledResp {
  bool batching_signing_enabled = 1;
}

message InitSoftwareTokenReq {
  string pin = 1;
}

message UpdateSoftwareTokenPinReq {
  string token_id = 1;
  string old_pin = 2;
  string new_pin = 3;
}

message GetHSMOperationalInfoResp {
  bool operational = 1;
}

message GetMemberSigningInfoReq {
  ClientIdProto member_id = 1;
}

message GetMemberSigningInfoResp {
  string key_id = 1;
  CertificateInfoProto cert = 2;
  string sign_mechanism_name = 3;
}
