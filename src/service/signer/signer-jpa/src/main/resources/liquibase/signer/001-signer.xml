<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.19.xsd">

    <changeSet id="signer-create-settimestamps-function" author="niis">
        <sql splitStatements="false"><![CDATA[
            CREATE OR REPLACE FUNCTION set_timestamps()
            RETURNS TRIGGER
            LANGUAGE plpgsql
            AS $$
            BEGIN
                IF TG_OP = 'INSERT' THEN
                    NEW.created_at := CURRENT_TIMESTAMP;
                END IF;
                NEW.updated_at := CURRENT_TIMESTAMP;
            RETURN NEW;
            END;
            $$;
            ]]></sql>
    </changeSet>

    <changeSet id="create-temp-identifier-table" author="niis">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="identifier"/>
            </not>
        </preConditions>
        <comment>
            TODO This is a temporary table mainly for CS support. There will be a separate task to properly implement this.
        </comment>
        <createTable tableName="identifier">
            <column name="id" type="BIGINT">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="discriminator" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="type" type="VARCHAR(255)"/>
            <column name="xroadinstance" type="VARCHAR(255)"/>
            <column name="memberclass" type="VARCHAR(255)"/>
            <column name="membercode" type="VARCHAR(255)"/>
            <column name="subsystemcode" type="VARCHAR(255)"/>
            <column name="serviceversion" type="VARCHAR(255)"/>
            <column name="servicecode" type="VARCHAR(255)"/>
            <column name="groupcode" type="VARCHAR(255)"/>
            <column name="securitycategory" type="VARCHAR(255)"/>
            <column name="servercode" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>

    <changeSet id="create-signer_tokens-table" author="niis">
        <createTable tableName="signer_tokens">
            <column name="id" type="BIGSERIAL" remarks="Primary key for the device entry.">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="external_id" type="VARCHAR(255)" remarks="Identifier used to refer to this device in APIs.">
                <constraints nullable="false" unique="true"/>
            </column>
            <column name="type" type="VARCHAR(255)" remarks="Pointer to the device type configuration.">
                <constraints nullable="false"/>
            </column>
            <column name="friendly_name" type="VARCHAR(255)" remarks="Name that is displayed in UI."/>
            <column name="serial_no" type="VARCHAR(255)" remarks="Id of the token (serial number)."/>
            <column name="label" type="VARCHAR(255)" remarks="Id of the slot (label)."/>
            <column name="pin" type="BYTEA" remarks="Hash of the PIN code used to access the token."/>
            <column name="created_at" type="TIMESTAMP(6) WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="updated_at" type="TIMESTAMP(6) WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet id="create-signer_keys-table" author="niis">
        <createTable tableName="signer_keys">
            <column name="id" type="BIGSERIAL" remarks="Primary key for the key entry.">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="external_id" type="VARCHAR(255)" remarks="Unique identifier for the key.">
                <constraints nullable="false" unique="true"/>
            </column>
            <column name="token_id" type="BIGINT" remarks="Foreign key referencing the keyconf_devices table.">
                <constraints nullable="false" foreignKeyName="fk_key_token" references="signer_tokens(id)" deleteCascade="true"/>
            </column>
            <column name="type" type="VARCHAR(16)" remarks="Type of the key.">
                <constraints nullable="false"/>
            </column>
            <column name="friendly_name" type="VARCHAR(1024)" remarks="Name that is displayed in UI."/>
            <column name="label" type="VARCHAR(1024)" remarks="Label of the key."/>
            <column name="public_key" type="VARCHAR(4096)" remarks="Base64 encoded public key corresponding to the private key."/>
            <column name="keystore" type="BYTEA" remarks="Encrypted PKCS#12 key store."/>
            <column name="sign_mechanism_name" type="VARCHAR(255)" remarks="Signing (PKCS#11) mechanism name."/>
            <column name="usage" type="VARCHAR(255)" remarks="Usage type of the key (e.g., SIGNING, AUTHENTICATION)."/>
            <column name="created_at" type="TIMESTAMP(6) WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="updated_at" type="TIMESTAMP(6) WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet id="create-signer_certificates-table" author="niis">
        <createTable tableName="signer_certificates">
            <column name="id" type="BIGSERIAL" remarks="Primary key for the certificate entry.">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="external_id" type="VARCHAR(255)" remarks="Identifier for the certificate.">
                <constraints nullable="true" unique="true"/>
            </column>
            <column name="key_id" type="BIGINT" remarks="Foreign key referencing the keyconf_keys table.">
                <constraints nullable="false" foreignKeyName="fk_cert_key" references="signer_keys(id)" deleteCascade="true"/>
            </column>
            <column name="member_id" type="BIGINT" remarks="Foreign key referencing the identifier table (ClientIdEntity).">
                <constraints nullable="true" foreignKeyName="fk_cert_member" references="identifier(id)" deleteCascade="false"/>
            </column>
            <column name="data" type="BYTEA" remarks="Raw certificate data.">
                <constraints nullable="false"/>
            </column>
            <column name="status" type="VARCHAR(255)" remarks="Current status of the certificate (e.g., SAVED, REGISTERED)."/>
            <column name="active" type="BOOLEAN" defaultValueBoolean="true" remarks="Whether this certificate can be used by the proxy.">
                <constraints nullable="false"/>
            </column>
            <column name="next_renewal_time" type="TIMESTAMP" remarks="Recommended time by the CA for renewing the certificate."/>
            <column name="renewed_cert_hash" type="VARCHAR(255)" remarks="Hash of newer cert version in registration process."/>
            <column name="renewal_error" type="TEXT" remarks="Error message from automatic renewal process."/>
            <column name="ocsp_verify_error" type="TEXT" remarks="Error message from OCSP verification before activation."/>
            <column name="created_at" type="TIMESTAMP(6) WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="updated_at" type="TIMESTAMP(6) WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet id="create-signer_certificate_requests-table" author="niis">
        <createTable tableName="signer_certificate_requests">
            <column name="id" type="BIGSERIAL" remarks="Primary key for the certificate request entry.">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="external_id" type="VARCHAR(255)" remarks="Identifier for the certificate request.">
                <constraints nullable="true" unique="true"/>
            </column>
            <column name="key_id" type="BIGINT" remarks="Foreign key referencing the keyconf_keys table.">
                <constraints nullable="false" foreignKeyName="fk_cert_req_key" references="signer_keys(id)" deleteCascade="true"/>
            </column>
            <column name="member_id" type="BIGINT" remarks="Foreign key referencing the identifier table (ClientIdEntity).">
                <constraints nullable="true" foreignKeyName="fk_certreq_member" references="identifier(id)"/>
            </column>
            <column name="subject_name" type="VARCHAR(1024)" remarks="Distinguished Name (DN) used in the CSR.">
                <constraints nullable="false"/>
            </column>
            <column name="subject_alternative_name" type="TEXT" remarks="Subject Alternative Name (SAN) extension used in the CSR."/>
            <column name="certificate_profile" type="VARCHAR(1024)" remarks="Fully qualified class name of the certificate profile used."/>
            <column name="created_at" type="TIMESTAMP(6) WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="updated_at" type="TIMESTAMP(6) WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>

    <changeSet id="signer-add-timestamps-triggers" author="niis">
        <sql splitStatements="false"><![CDATA[
            DROP TRIGGER IF EXISTS set_timestamps ON signer_tokens;
            CREATE TRIGGER set_timestamps BEFORE INSERT OR UPDATE ON signer_tokens
                FOR EACH ROW EXECUTE FUNCTION set_timestamps();

            DROP TRIGGER IF EXISTS set_timestamps ON signer_keys;
            CREATE TRIGGER set_timestamps BEFORE INSERT OR UPDATE ON signer_keys
                FOR EACH ROW EXECUTE FUNCTION set_timestamps();

            DROP TRIGGER IF EXISTS set_timestamps ON signer_certificates;
            CREATE TRIGGER set_timestamps BEFORE INSERT OR UPDATE ON signer_certificates
                FOR EACH ROW EXECUTE FUNCTION set_timestamps();

            DROP TRIGGER IF EXISTS set_timestamps ON signer_certificate_requests;
            CREATE TRIGGER set_timestamps BEFORE INSERT OR UPDATE ON signer_certificate_requests
                FOR EACH ROW EXECUTE FUNCTION set_timestamps();
            ]]></sql>
    </changeSet>

</databaseChangeLog>
