/*
 * The MIT License
 * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)
 * Copyright (c) 2018 Estonian Information System Authority (RIA),
 * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)
 * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
syntax = "proto3";

package org.niis.xroad.backupmanager.proto;

import "common_messages.proto";

import "google/protobuf/timestamp.proto";

option java_multiple_files = true;

service BackupService {
  rpc ListBackups(Empty) returns (ListBackupsResp) {}
  rpc DeleteBackup(DeleteBackupReq) returns (Empty) {}
  rpc UploadBackup(UploadBackupReq) returns (BackupItem) {}
  rpc DownloadBackup(DownloadBackupReq) returns (BackupData) {}

  rpc CreateBackup(CreateBackupReq) returns (BackupItem) {}
  rpc RestoreFromBackup(RestoreBackupReq) returns (Empty) {}

  rpc GenerateGgpKey(GenerateGpgKeyReq) returns (Empty) {}
  rpc GetBackupEncryptionStatus(Empty) returns (BackupEncryptionStatusResp) {}
}

message ListBackupsResp {
  repeated BackupItem backup_items = 1;
}

message BackupItem {
  string name = 1;
  google.protobuf.Timestamp created_at = 2;
}

message DeleteBackupReq {
  string backup_name = 1;
}

message DownloadBackupReq {
  string backup_name = 1;
}

message BackupData {
  string backup_name = 1;
  bytes backup_file = 2;
}

message UploadBackupReq {
  string backup_name = 1;
  bytes backup_file = 2;
  bool ignore_warnings = 3;
}

message CreateBackupReq {
  string security_server_id = 1;
}

message RestoreBackupReq {
  string backup_name = 1;
  string security_server_id = 2;
}

message GenerateGpgKeyReq {
  string key_name = 1;
}

message BackupEncryptionStatusResp {
  bool backup_encryption_status = 1;
  repeated string backup_encryption_keys = 2;
}
