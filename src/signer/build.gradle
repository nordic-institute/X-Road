plugins {
    id 'com.github.johnrengelman.shadow'
}

project.ext.schemaTargetDir = layout.buildDirectory.dir("generated-sources").get().asFile

configurations {
    xjc
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', schemaTargetDir]
    }
    intTest {
        resources {
            srcDir '../common/common-int-test/src/main/resources/'
        }
    }
}

dependencies {
    implementation(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))

    implementation project(':common:common-util')
    implementation project(':common:common-verifier')
    implementation project(':common:common-rpc')
    implementation project(':signer-protocol')

    implementation('org.springframework:spring-context')
    // Necessary since there are jars with no adequate Maven dependencies
    implementation fileTree(dir: '../libs', include: '*.jar')

    testImplementation project(':common:common-test')
    testImplementation project(path: ':common:common-verifier', configuration: 'testArtifacts')

    testImplementation "org.mockito:mockito-core:$mockitoVersion"


    intTestRuntimeOnly project(':addons:hwtoken')
    intTestRuntimeOnly project(':common:common-util')
    intTestImplementation project(":common:common-test")
    intTestImplementation project(":common:common-int-test")

    xjc "org.glassfish.jaxb:jaxb-xjc:$jaxbVersion"
    xjc "org.glassfish.jaxb:jaxb-runtime:$jaxbVersion"
}

jar {
    manifest {
        attributes 'Main-Class': 'ee.ria.xroad.signer.SignerMain'
    }
    archiveClassifier = 'plain'

}

shadowJar {
    archiveClassifier = ''
    exclude('**/module-info.class')
    from rootProject.file("LICENSE.txt")
    mergeServiceFiles()
}

jar.finalizedBy shadowJar

tasks.register('createDirs') {
    doLast {
        project.ext.schemaTargetDir.mkdirs()
    }
}

tasks.register('xjc') {
    dependsOn(':common:common-util:xjc', ':common:common-verifier:xjc')
    inputs.files files('src/main/resources/*.xsd')
    outputs.dir project.ext.schemaTargetDir

    doLast {
        ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.xjc.asPath)

        ant.xjc(
            destdir: project.ext.schemaTargetDir,
            package: 'ee.ria.xroad.common.conf.keyconf',
            schema: 'src/main/resources/keyconf.xsd',
            binding: '../common/common-util/src/main/resources/identifiers-bindings.xml'
        )
    }
}

// XXX For running several instances side-by-side, do not use the gradle task --
// gradle cannot handle parallel runs if each task invokes a long-running server process.
// Instead, use the .jar in the build/libs directory:
// java -Djava.library.path=/home/iks2/core/passwordstore -jar signer-1.0.jar
tasks.register('runSignerMain', JavaExec) {
    jvmArgs '-Dxroad.signer.key-configuration-file=src/test/resources/keyconf.xml',
        '-Dxroad.signer.device-configuration-file=src/test/resources/devices.ini',
        '-Dxroad.common.configuration-path=../common/common-util/src/test/resources/globalconf_good_v2',
        "-Dxroad.common.temp-files-path=${layout.buildDirectory.get().asFile}/tmp/",
        '-Dxroad.proxy.configuration-anchor-file=../common/common-util/src/test/resources/configuration-anchor1.xml',
        '-Dlogback.configurationFile=src/test/resources/logback-signer.xml',
        '-Djava.library.path=../passwordstore:../libs',
        '-Dxroad.signer.moduleManagerImpl=ee.ria.xroad.signer.tokenmanager.module.HardwareModuleManagerImpl'
    mainClass = 'ee.ria.xroad.signer.SignerMain'
    classpath = sourceSets.main.runtimeClasspath
    classpath += files("../addons/hwtoken/${layout.buildDirectory.get().asFile}/libs/hwtoken-1.0.jar")

    description = "Starts signer main program.\nNote: " +
        "Be sure that appropriate libpkcs11wrapper.so is installed to the " +
        "directory\n{JAVA_HOME}/jre/lib/i386 (analogous directory for 64-bit " +
        "OS). Otherwise use\nnext property to detemine your library path:\n" +
        "jvmArgs '-Djava.library.path=/foo/bar/iaik/bin/unix/linux-x86/release'";
}

xjc.dependsOn createDirs
compileJava.dependsOn xjc

tasks.register('intTest', Test) {
    useJUnitPlatform()

    setDescription("Runs integration tests.")
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath

    def intTestArgs = []
    if (project.hasProperty('intTestProfilesInclude')) {
        intTestArgs += "-Dspring.profiles.include=" + project.getProperty('intTestProfilesInclude')
    }

    jvmArgs intTestArgs

    testLogging {
        showStackTraces(true)
        showExceptions(true)
        showCauses(true)
        showStandardStreams(true)
    }
}

tasks.named('check') {
    dependsOn tasks.named('intTest')
}
