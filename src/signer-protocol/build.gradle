import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java-library'
    alias(libs.plugins.protobuf)
}

sourceSets {
    main {
        java.srcDirs = [
            'src/main/java'
            , 'build/generated-sources'
            , 'build/generated/source/proto/main/grpc'
            , 'build/generated/source/proto/main/java']
    }
}

dependencies {
    implementation project(':common:common-domain')
    api project(':common:common-rpc')
}

protobuf {
    protoc { artifact = libs.protobuf.protoc.get().toString() }
    plugins {
        grpc { artifact = libs.grpc.protocGenGrpcJava.get().toString() }
    }
    generateProtoTasks {
        all()*.plugins { grpc { option('jakarta_omit') } }
    }
}

compileJava.dependsOn generateProto

test {
    jvmArgs '-Djava.library.path=../lib'
}

if (Os.isName("linux")) {
    tasks.register('make', Exec) {
        def javaCompiler = javaToolchains.compilerFor(java.toolchain)
        def javaHome = javaCompiler.get().metadata.installationPath.asFile.absolutePath

        inputs.dir fileTree(dir: '../passwordstore', includes: ['*.c', '*.h', 'Makefile'])
        inputs.dir file("${javaHome}/include")
        outputs.dir file('../lib')

        workingDir '../'
        commandLine 'make', 'clean', 'all'
    }

    tasks.register('makeClean', Exec) {
        workingDir '../'
        commandLine 'make', 'clean'
    }

    classes.dependsOn make
    clean.dependsOn makeClean
}
