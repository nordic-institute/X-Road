/*
 * The MIT License
 * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)
 * Copyright (c) 2018 Estonian Information System Authority (RIA),
 * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)
 * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.niis.xroad.cs.test.ui.glue;

import com.codeborne.selenide.Condition;
import io.cucumber.datatable.DataTable;
import io.cucumber.java.en.Step;
import org.niis.xroad.cs.test.ui.page.SettingsMemberClassesPageObj;

import java.util.List;
import java.util.Map;

import static com.codeborne.selenide.Condition.disabled;
import static com.codeborne.selenide.Condition.enabled;
import static com.codeborne.selenide.Condition.visible;
import static org.niis.xroad.common.test.ui.utils.VuetifyHelper.vTextField;

/**
 * Settings -> System Settings -> Member classes page steps.
 */
public class SystemSettingsMemberClassesStepDefs extends BaseUiStepDefs {
    private final SettingsMemberClassesPageObj settingsMemberClassesPageObj = new SettingsMemberClassesPageObj();

    @Step("A new member class {} with description {} is added")
    public void memberClassIsAdded(String code, String description) {
        settingsMemberClassesPageObj.btnAddMemberClass().click();
        commonPageObj.dialog.btnSave()
                .shouldBe(visible)
                .shouldBe(disabled);
        vTextField(settingsMemberClassesPageObj.addEditDialog.inputMemberClassCode()).setValue(code);
        vTextField(settingsMemberClassesPageObj.addEditDialog.inputMemberClassDescription()).setValue(description);
        commonPageObj.dialog.btnSave().shouldBe(visible, enabled).click();

        commonPageObj.snackBar.success().shouldBe(Condition.visible);
        commonPageObj.snackBar.btnClose().click();
    }

    @Step("A set of member classes are added")
    public void memberClassesAdded(DataTable table) {
        List<Map<String, String>> rows = table.asMaps(String.class, String.class);
        for (Map<String, String> columns : rows) {
            memberClassIsAdded(columns.get("$code"), columns.get("$description"));
        }
    }

    @Step("A member with code {} and description {} is visible")
    public void memberClassIsVisible(String code, String desc) {
        settingsMemberClassesPageObj.listRowOf(code, desc).shouldBe(Condition.visible);
    }

    @Step("A member with code {} is not present")
    public void memberClassIsNotPresent(String code) {
        settingsMemberClassesPageObj.listRowOf(code).shouldNotBe(Condition.visible);
    }

    @Step("A set of member classes are visible")
    public void memberClassesAreVisible(DataTable table) {
        List<Map<String, String>> rows = table.asMaps(String.class, String.class);
        for (Map<String, String> columns : rows) {
            var code = columns.get("$code");
            var desc = columns.get("$description");
            memberClassIsVisible(code, desc);
        }
    }

    @Step("A new member class {} is added if missing")
    public void memberClassIsAddedOptional(String code) {
        var description = "Generated by e2e-tests";
        if (!settingsMemberClassesPageObj.listRowPartialDescOf(description).isDisplayed()) {
            memberClassIsAdded(code, description);
        } else {
            testReportService.attachText("Member class " + code + " already exists. Skipping step.", "");
        }
    }

    @Step("Member class {} edit dialog is opened")
    public void clickMemberClassEditDialog(String code) {
        settingsMemberClassesPageObj.listRowBtnEditOf(code)
                .shouldBe(visible)
                .shouldBe(enabled)
                .click();
    }

    @Step("Member class {} delete button is clicked")
    public void clickMemberClassDelete(String code) {

        settingsMemberClassesPageObj.listRowBtnDeleteOf(code).click();
    }

    @Step("Member class description is set to {} in popup")
    public void editMemberClassDesc(String value) {
        vTextField(settingsMemberClassesPageObj.addEditDialog.inputMemberClassDescription())
                .clear()
                .setValue(value);
    }

    @Step("Member class list is set to {} rows per page")
    public void setMemberClassListSize(String value) {
        settingsMemberClassesPageObj.listSizeSelector().click();

        settingsMemberClassesPageObj.listSizeSelectorOptionOf(value)
                .shouldBe(Condition.visible)
                .click();

        settingsMemberClassesPageObj.listSizeSelectorText()
                .shouldBe(Condition.text(value));
    }

}
