#!/bin/bash
if [ "$1" = "upgrade" ]; then
  if dpkg --compare-versions "#LAST_SUPPORTED_VERSION#" gt "$2"; then
    echo "ERROR: Upgrade supported from #LAST_SUPPORTED_VERSION# or newer" >&2
    exit 1
  fi
fi

. /usr/share/debconf/confmodule

if [ "$1" = "upgrade" ];
 then
   if dpkg --compare-versions "$2" lt-nl "6.6"
      then echo -e "\n\ndirect upgrade from xroad-proxy<6.6 is not supported\n\n"
      exit 1
   fi
fi

if [ "$1" = "upgrade" ];
  then
    # migrate from client-fastest-connecting-ssl-use-uri-cache to client-fastest-connecting-ssl-uri-cache-period
    local_ini=/etc/xroad/conf.d/local.ini
    local_ini_value=$(crudini --get ${local_ini} proxy client-fastest-connecting-ssl-use-uri-cache 2>/dev/null)
    if [[ -n "$local_ini_value" ]];
      then
        echo "client-fastest-connecting-ssl-use-uri-cache present in local.ini, perform migration to client-fastest-connecting-ssl-uri-cache-period"
        if [ "$local_ini_value" = true ] ;
          then
            echo "client-fastest-connecting-ssl-use-uri-cache=true, no action needed, use default value"
          else
            echo "client-fastest-connecting-ssl-use-uri-cache=false, set client-fastest-connecting-ssl-uri-cache-period=0"
            crudini --set ${local_ini} proxy client-fastest-connecting-ssl-uri-cache-period 0
          fi
        crudini --del ${local_ini} proxy client-fastest-connecting-ssl-use-uri-cache
      else
        echo "client-fastest-connecting-ssl-use-uri-cache not present in local.ini, use default value"
      fi
fi

function handle_error {
   ERR=$(</tmp/cert.err)
   db_subst xroad-common/cert-generation-error ERR "$(printf %s "$ERR" | debconf-escape -e)"
   db_input critical xroad-common/cert-generation-error
   db_go
   rm -f /tmp/cert.err
}

#check certificates and request necessary subject information from user
HOST=$(hostname -f)
if (( ${#HOST} > 64 )); then
  HOST="$(hostname -s)"
fi
LIST=
for i in $(ip addr | grep 'scope global' | tr '/' ' ' | awk '{print $2}'); do LIST+="IP:$i,"; done;
ALT="${LIST}DNS:$(hostname -f),DNS:$(hostname -s)"

while :; do
    if [[ ! -r /etc/xroad/ssl/internal.crt || ! -r /etc/xroad/ssl/internal.key  || ! -r /etc/xroad/ssl/internal.p12 ]]
    then
       echo "Generating new internal.[crt|key|p12] files "
       db_subst xroad-common/service-subject HOST "$HOST"
       db_subst xroad-common/service-altsubject ALT "$ALT"
       RET=
       db_get xroad-common/service-subject
       if [ -z "$RET"  ]
       then
          db_set xroad-common/service-subject "/CN=$HOST"
       fi
       RET=
       db_get xroad-common/service-altsubject
       if [ -z "$RET"  ]
       then
          db_set xroad-common/service-altsubject "$ALT"
       fi
       db_input critical xroad-common/service-subject || true
       db_input critical xroad-common/service-altsubject || true
       db_go
       RET=
       db_get xroad-common/service-subject
       subj="$RET"
       RET=
       db_get xroad-common/service-altsubject
       altn="$RET"
       db_go
       rm -f /etc/xroad/ssl/internal.crt /etc/xroad/ssl/internal.key /etc/xroad/ssl/internal.p12
       echo "generating new service TLS key/certificate with $subj and $altn"
       /usr/share/xroad/scripts/generate_certificate.sh  -n internal -s "${subj}" -a "${altn}" -p 2>/tmp/cert.err || handle_error
    else
      break
    fi
done

db_stop
