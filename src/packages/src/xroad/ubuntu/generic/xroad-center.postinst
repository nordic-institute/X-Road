#!/bin/bash
# postinst script for xroad-center

. /usr/share/debconf/confmodule
trap db_stop EXIT

abort() {
    local rc=$?
    echo -e "xroad-center: FATAL: $*" >&2
    exit $rc
}
log() { echo "xroad-center: $*" >&2; }
get_prop() { crudini --get "$1" '' "$2" 2>/dev/null || echo -n "$3"; }

gen_pw() {
  head -c 24 /dev/urandom | base64 | tr "/+" "_-"
}

handle_error() {
    ERR=$(</tmp/cert.err)
    db_subst xroad-common/cert-generation-abort ERR "$(printf %s "$ERR" | debconf-escape -e)"
    db_input critical xroad-common/cert-generation-abort
    db_go
    rm -f /tmp/cert.err
}

handle_error_retry() {
  ERR=$1
  db_reset xroad-common/cert-generation-retry
  db_reset xroad-common/cert-generation-error
  db_subst xroad-common/cert-generation-error ERR "$(printf %s "$ERR" | debconf-escape -e)"
  db_beginblock
  db_input critical xroad-common/cert-generation-error || true
  db_input critical xroad-common/cert-generation-retry || true
  db_endblock
  db_go

  db_get xroad-common/cert-generation-retry
  if [ "$RET" = false ]; then
    exit 1
  fi

  echo "Retrying certificate generation"
}

# setup database and run migrations
setup_database() {
    /usr/share/xroad/scripts/migrate_db_cfg_to_spring_datasourse.sh

    local db_properties=/etc/xroad/db.properties
    local root_properties=/etc/xroad.properties
    RET=
    db_get xroad-common/database-host || true
    local -r new_db_host="${RET}"
    local db_host="${new_db_host:-127.0.0.1:5432}"

    RET=
    db_get xroad-common/skip-cs-db-migrations || true
    local skip_migrations="${RET}"
    crudini --set "${db_properties}" '' skip_migrations "${skip_migrations}"

    local db_user=$(get_prop ${db_properties} 'spring.datasource.username' 'centerui')
    local db_schema=$(get_prop ${db_properties} 'spring.datasource.hikari.data-source-properties.currentSchema' "${db_user%%@*}")
    db_schema=${db_schema%%,*}
    local db_password=$(get_prop ${db_properties} 'spring.datasource.password' 'centerui')
    local db_database="centerui_production"
    local db_master_user=postgres

    local db_url=$(get_prop ${db_properties} 'spring.datasource.url' "jdbc:postgresql://${db_host}/${db_database}")
    pat='^jdbc:postgresql://([^/]*)($|/([^\?]*)(.*)$)'
    if [[ "$db_url" =~ $pat ]]; then
      db_host=${new_db_host:-${BASH_REMATCH[1]}}
      db_database=${BASH_REMATCH[3]:-$db_database}
    else
      log "Unable to parse '$db_url', using 'jdbc:postgresql://$db_host/$db_database'"
    fi

    crudini --set "${db_properties}" '' spring.datasource.url "jdbc:postgresql://${db_host}/${db_database}"

    local db_admin_conn_user=$(get_prop ${root_properties} 'centerui.database.admin_user')
    local db_admin_password=$(get_prop ${root_properties} 'centerui.database.admin_password' 'centerui')
    if [[ -z "$db_admin_conn_user" && -n "$db_admin_password" ]]; then
      db_admin_conn_user="${db_user}_admin"
    else
      db_admin_conn_user="${db_admin_conn_user:-$db_user}"
      db_admin_password="${db_admin_password:-$db_password}"
    fi
    local db_admin_user="${db_admin_conn_user%%@*}"

    export PGOPTIONS="-c client-min-messages=warning -c search_path=$db_schema,public"

    local hosts
    IFS=',' read -ra hosts <<<"$db_host"
    local db_addr=${hosts[0]%%:*}
    local db_port=${hosts[0]##*:}

    local_psql() { su -l -c "psql -qtA -p $db_port ${*@Q}" postgres; }
    remote_psql() { psql -h "$db_addr" -p "$db_port" -qtA "$@"; }

    psql_dbuser() {
        PGDATABASE="$db_database" PGUSER="$db_user" PGPASSWORD="$db_password" remote_psql "$@"
    }

    psql_adminuser() {
            PGDATABASE="$db_database" PGUSER="$db_admin_user" PGPASSWORD="$db_admin_password" remote_psql "$@"
        }

    if [[ -f ${root_properties} && $(get_prop ${root_properties} postgres.connection.password) != "" ]]; then
        local db_master_passwd=$(get_prop ${root_properties} postgres.connection.password)
        db_master_user=$(get_prop ${root_properties} postgres.connection.user 'postgres')
        function psql_master() {
            PGDATABASE="postgres" PGPASSWORD="${db_master_passwd}" PGUSER="${db_master_user}" remote_psql "$@"
        }
    else
        function psql_master() { local_psql "$@"; }
    fi

    local db_plain_user=${db_user%%@*}

    if PGCONNECT_TIMEOUT=5 psql_dbuser -c "\q" &>/dev/null; then
        log "Database and user exists, skipping database creation."
    else

        if [[ $(get_prop ${root_properties} 'centerui.database.admin_user' "") == "" ]]; then
          db_admin_user="${db_user}_admin"
        fi

        if [[ $(get_prop ${root_properties} 'centerui.database.admin_password' "") == "" ]]; then
          db_admin_password=$(gen_pw)
        fi

        if [[ ! -f "$root_properties" ]]; then
          touch ${root_properties}
          chown root:root ${root_properties}
          chmod 600 ${root_properties}
        fi

        db_password=$(gen_pw)
        echo "Creating database"
        psql_master <<EOF || abort "Creating database '${db_database}' on '${db_host}' failed."
CREATE DATABASE "${db_database}" ENCODING 'UTF8';
REVOKE ALL ON DATABASE "${db_database}" FROM PUBLIC;
DO \$\$
BEGIN
  CREATE ROLE "${db_admin_user}" LOGIN PASSWORD '${db_admin_password}';
  GRANT "${db_admin_user}" TO "${db_master_user}";
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'User $db_admin_user already exists';
END
\$\$;
GRANT CREATE,TEMPORARY,CONNECT ON DATABASE "${db_database}" TO "${db_admin_user}";
\c "${db_database}"
CREATE EXTENSION hstore;
CREATE SCHEMA "${db_schema}" AUTHORIZATION "${db_admin_user}";
REVOKE ALL ON SCHEMA public FROM PUBLIC;
GRANT USAGE ON SCHEMA public TO "${db_admin_user}";
EOF
        echo "Creating database plain user"
        psql_master <<EOF || abort "Creating plain user failed."
DO \$\$
BEGIN
  CREATE ROLE "${db_plain_user}" LOGIN PASSWORD '${db_password}';
  GRANT "${db_plain_user}" TO "${db_master_user}";
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'User $db_plain_user already exists';
END
\$\$;
\c "${db_database}"
GRANT TEMPORARY,CONNECT ON DATABASE "${db_database}" TO "${db_plain_user}";
GRANT USAGE ON SCHEMA public TO "${db_plain_user}";
EOF
        crudini --set "${db_properties}" '' spring.datasource.hikari.data-source-properties.currentSchema "${db_schema},public"
        crudini --set "${db_properties}" '' spring.datasource.username "centerui"
        crudini --set "${db_properties}" '' spring.datasource.password "${db_password}"

        crudini --set --inplace "${root_properties}" '' 'centerui.database.admin_user' "${db_admin_conn_user}"
        crudini --set --inplace "${root_properties}" '' 'centerui.database.admin_password' "${db_admin_password}"
    fi

    if [ "$skip_migrations" = true ] ; then
      echo "skipping database migrations"
    else
      /usr/share/xroad/db/migrate.sh || abort "Database migration failed. ABORTING."
    fi
}

migrate_internal_crt() {
  if [[ -f /etc/xroad/ssl/internal.crt && -f /etc/xroad/ssl/internal.key ]]; then
    if [[ ! -r /etc/xroad/ssl/management-service.crt || ! -r /etc/xroad/ssl/management-service.key || ! -r /etc/xroad/ssl/management-service.p12 ]]; then
      echo "found existing internal.crt and internal.key, migrating those to management-service.crt, key and p12"
      # Copying instead of moving because nginx configuration is not updated until
      # registration-service and management service packages are installed.
      # internal.* files are removed in xroad-centralserver.postinst
      cp /etc/xroad/ssl/internal.crt /etc/xroad/ssl/management-service.crt
      cp /etc/xroad/ssl/internal.key /etc/xroad/ssl/management-service.key
      openssl pkcs12 -export -in /etc/xroad/ssl/management-service.crt -inkey /etc/xroad/ssl/management-service.key -name management-service -out /etc/xroad/ssl/management-service.p12 -passout pass:management-service
      chmod -f 640 /etc/xroad/ssl/management-service.key /etc/xroad/ssl/management-service.crt /etc/xroad/ssl/management-service.p12
      chown -f xroad:xroad /etc/xroad/ssl/management-service.key /etc/xroad/ssl/management-service.crt /etc/xroad/ssl/management-service.p12
    else
        echo "found existing management-service.key, crt and p12, keeping those and not migrating internal.key and crt"
    fi
  fi
}

# check certificates and request necessary subject information from the user
create_certificates() {
    HOST=$(hostname -f)
    if (( ${#HOST} > 64 )); then
      HOST="$(hostname -s)"
    fi
    LIST=
    for i in $(ip addr | grep 'scope global' | tr '/' ' ' | awk '{print $2}'); do LIST+="IP:$i,"; done;
    ALT="${LIST}DNS:$(hostname -f),DNS:$(hostname -s)"

    if [[ -f /etc/xroad/ssl/nginx.crt && -f /etc/xroad/ssl/nginx.key ]];
    then
      if [[ ! -r /etc/xroad/ssl/center-admin-service.crt || ! -r /etc/xroad/ssl/center-admin-service.key || ! -r /etc/xroad/ssl/center-admin-service.p12 ]]
      then
        echo "found existing nginx.crt and nginx.key, migrating those to center-admin-service.crt, key and p12"
        mv -f /etc/xroad/ssl/nginx.crt /etc/xroad/ssl/center-admin-service.crt
        mv -f /etc/xroad/ssl/nginx.key /etc/xroad/ssl/center-admin-service.key
        rm -f /etc/xroad/ssl/center-admin-service.p12
        openssl pkcs12 -export -in /etc/xroad/ssl/center-admin-service.crt -inkey /etc/xroad/ssl/center-admin-service.key -name center-admin-service -out /etc/xroad/ssl/center-admin-service.p12 -passout pass:center-admin-service
        chmod -f 660 /etc/xroad/ssl/center-admin-service.key /etc/xroad/ssl/center-admin-service.crt /etc/xroad/ssl/center-admin-service.p12
        chown -f xroad:xroad /etc/xroad/ssl/center-admin-service.key /etc/xroad/ssl/center-admin-service.crt /etc/xroad/ssl/center-admin-service.p12

      else
        echo "found existing center-admin-service.key, crt and p12, keeping those and not migrating nginx.key and crt"
      fi
    fi

    while :; do
        if [[ ! -r /etc/xroad/ssl/center-admin-service.crt || ! -r /etc/xroad/ssl/center-admin-service.key || ! -r /etc/xroad/ssl/center-admin-service.p12 ]]; then
            log "Generating new center-admin-service.[crt|key|p12] files "
            db_subst xroad-common/admin-subject HOST "$HOST"
            db_subst xroad-common/admin-altsubject ALT "$ALT"
            RET=
            db_get xroad-common/admin-subject
            if [ -z "$RET" ]; then
                db_set xroad-common/admin-subject "/CN=$HOST"
            fi
            RET=
            db_get xroad-common/admin-altsubject
            if [ -z "$RET" ]; then
                db_set xroad-common/admin-altsubject "$ALT"
            fi
            db_input critical xroad-common/admin-subject || true
            db_input critical xroad-common/admin-altsubject || true
            db_go
            RET=
            db_get xroad-common/admin-subject
            subj="$RET"
            RET=
            db_get xroad-common/admin-altsubject
            altn="$RET"
            db_go
            rm -f /etc/xroad/ssl/center-admin-service.crt /etc/xroad/ssl/center-admin-service.key /etc/xroad/ssl/center-admin-service.p12
            log "generating new webUI TLS key/certificate with $subj and $altn"
            /usr/share/xroad/scripts/generate_certificate.sh -n center-admin-service -s "${subj}" -a "${altn}" -p 2>/tmp/cert.err || handle_error
        else
            break
        fi
    done

    if [[ ! -r /etc/xroad/ssl/management-service.crt || ! -r /etc/xroad/ssl/management-service.key || ! -r /etc/xroad/ssl/management-service.p12 ]]; then
        log "Generating new management-service.[crt|key|p12] files "

        db_subst xroad-common/service-subject HOST "$HOST"
        db_subst xroad-common/service-altsubject ALT "$ALT"

        while :; do
            db_get xroad-common/service-subject
            [ -z "$RET" ] && db_set xroad-common/service-subject "/CN=$HOST"
            db_get xroad-common/service-altsubject
            [ -z "$RET" ] && db_set xroad-common/service-altsubject "$ALT"

            db_beginblock
            db_input critical xroad-common/service-subject || true
            db_input critical xroad-common/service-altsubject || true
            db_endblock
            db_go

            db_get xroad-common/service-subject
            subj="$RET"
            db_get xroad-common/service-altsubject
            altn="$RET"
            if [ -z "$subj" ]; then
              subj="/CN=$HOST"
            fi
            if [ -z "$altn" ]; then
              altn="$ALT"
            fi

            echo "generating new management service TLS key/certificate with $subj and $altn"
            if ! /usr/share/xroad/scripts/generate_certificate.sh -n management-service -s "${subj}" -a "${altn}" -p 2>/tmp/cert.err; then
                ERR=$(</tmp/cert.err)
                rm -f /tmp/cert.err
                handle_error_retry "$ERR"
                db_fset xroad-common/service-subject seen false
                db_fset xroad-common/service-altsubject seen false
                continue
            fi

        break

        done
    fi
}

case "$1" in
configure | reconfigure)
    if dpkg --compare-versions "$2" lt-nl "7.4.0"; then
      migrate_internal_crt
    fi
    create_certificates
    setup_database

    RET=""
    db_get xroad-common/username
    AUSER="$RET"

    #add groups
    groups="xroad-security-officer xroad-system-administrator xroad-registration-officer"
    usergroups=" $(id -Gn "$AUSER") "
    for groupname in $groups; do
        if ! getent group "$groupname" >/dev/null; then
            groupadd --system "$groupname" || true
        fi
        if [[ $usergroups != *" $groupname "* ]]; then
            usermod -a -G "$groupname" "$AUSER" || true
        fi
    done

    chmod 755 /var/lib/xroad/public
    chown xroad:xroad /var/lib/xroad/public

    test -d /var/cache/xroad && test -w /var/cache/xroad || mkdir /var/cache/xroad
    chown xroad:xroad /var/cache/xroad
    test -d /etc/xroad/configuration-parts || mkdir /etc/xroad/configuration-parts
    chown xroad:xroad /etc/xroad/configuration-parts

    mkdir -p /var/lib/xroad/import
    chmod 755 /var/lib/xroad/import
    chown xroad:xroad /var/lib/xroad/import

    # generate gpg keypair when needed - directory does not exist and server is initialised
    if [[ -n "$2" ]]; then
      if [ ! -d /etc/xroad/gpghome ] ; then
        ID=$(/usr/share/xroad/scripts/get_central_server_instance_id.sh)
        if [[ -n "${ID}" ]] ; then
          /usr/share/xroad/scripts/generate_gpg_keypair.sh /etc/xroad/gpghome "${ID}"
        fi
      fi
      # always fix gpghome ownership
      [ -d /etc/xroad/gpghome ] && chown -R xroad:xroad /etc/xroad/gpghome

      # disable strict-identifier-checks for upgrades from version < 7.3.0
      if dpkg --compare-versions "$2" lt-nl "7.3.0"; then
          crudini --set /etc/xroad/conf.d/local.ini admin-service strict-identifier-checks false
      fi
    fi

    RET=
    db_get xroad-common/skip-cs-db-migrations || true
    skip_migrations="${RET}"

    #create symlink to nginx config
    if [[ -d /etc/nginx/sites-enabled ]]; then
      ln -sf /etc/xroad/nginx/xroad-public.conf /etc/nginx/sites-enabled/xroad-public
    fi

    invoke-rc.d --quiet rsyslog try-restart || true
    invoke-rc.d --quiet nginx try-restart || true
    invoke-rc.d --quiet xroad-signer try-restart || true
    ;;

abort-upgrade | abort-remove | abort-deconfigure)
    ;;

*)
    log "postinst called with unknown argument '$1'" >&2
    exit 1
    ;;
esac

#DEBHELPER#

exit 0
