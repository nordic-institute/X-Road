plugins {
    id 'io.spring.dependency-management'
    id 'org.springframework.boot'
    id 'com.github.node-gradle.node' version "$nodePluginVersion"
    id 'org.openapi.generator' version "$openApiGeneratorVersion"
    id 'org.niis.xroad.oasvalidatorplugin'
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'build/generated-sources/openapi/src/main/java']
    }
}

configurations {
    npm { canBeConsumed(false); canBeResolved(true) }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    npm project(path: ':shared-ui', configuration: 'npm')

    implementation project(':common-util')
    implementation project(':common-verifier')
    implementation project(':signer-protocol')
    implementation project(':serverconf')
    implementation project(':common-ui')
    implementation project(':common-rest-api')

    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation('org.springframework.cloud:spring-cloud-starter-sleuth')
    implementation('org.kohsuke:libpam4j:1.11')
    implementation('org.apache.commons:commons-compress:1.21')
    implementation('wsdl4j:wsdl4j:1.6.3')
    implementation('com.github.vladimir-bukhtoyarov:bucket4j-core:7.0.0')
    implementation("io.swagger.parser.v3:swagger-parser-v3:${swaggerParserVersion}")
    implementation('io.swagger:swagger-annotations:1.6.4')

    testImplementation project(':common-util')
    testImplementation project(':common-test')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation('org.hsqldb:hsqldb')

    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    implementation('javax.validation:validation-api')
}

bootRun {
    jvmArgs = ["-Dspring.output.ansi.enabled=ALWAYS"]
    if (project.hasProperty('args')) {
        def params = project.args.tokenize(',')
        args = params
    }
}

processResources {
    from('frontend/dist/') {
        into 'public/'
    }
}

node {
    download = true
    version = nodeVersion
    nodeProjectDir = file("frontend")
    if (System.getenv().containsKey("CI")) {
      npmInstallCommand = "ci"
    }
}

task npmInstallDeps(type: NpmTask, dependsOn: configurations.npm) {
    inputs.files('frontend/package.json')
    outputs.files('frontend/package-lock.json')
    args = ['install', '--quiet', '--package-lock-only'] + configurations.npm.files.collect { it.toString() }
    execOverrides {
        it.workingDir = 'frontend'
    }
}

task cleanNpmInstallDeps {
  //NOP
}

npmInstall {
    dependsOn += 'npmInstallDeps'
}

task buildFront(type: NpmTask, dependsOn: npmInstall) {
    inputs.files(configurations.npm)
    inputs.files(fileTree("frontend/") {
      exclude("dist/", "node_modules/.cache/")
    })
    outputs.dir("frontend/dist")
    args = ['run', 'build']
    execOverrides {
        it.workingDir = 'frontend'
    }
}

task checkFrontAudit(type: NpmTask) {
    inputs.files(
      'frontend/package.json',
      'frontend/package-lock.json'
    )
    outputs.files('build/reports/audit-ci.txt')
    // do a front end audit with npm run npx-check-audit
    // npx-check-audit uses a shared ignore list from /shared-ui/audit-ci-shared.json
    args = ['run', 'npx-check-audit']
    execOverrides {
        it.workingDir = 'frontend'
    }
}

// check that npm run license-check passes
task checkFrontLicense(type: NpmTask, dependsOn: 'npmInstall') {
    inputs.files("frontend/src/", "frontend/test/", "frontend/public/")
    outputs.upToDateWhen { true }
    args = ['run', 'license-check']
    execOverrides {
        it.workingDir = 'frontend'
    }
}

// check that npm run test:unit passes
task frontendUnitTests(type: NpmTask, dependsOn: buildFront) {
    inputs.files('frontend/dist', 'frontend/test', 'frontend/public')
    outputs.upToDateWhen { true }
    args = ['run', 'test:unit']
    execOverrides {
        it.workingDir = 'frontend'
    }
}

// run e2e tests vs remote url
if (!project.hasProperty("testTargetUrl")) {
    ext.testTargetUrl = ""
}

if (!project.hasProperty("testDataUrl")) {
    ext.testDataUrl = ""
}

if (!project.hasProperty("withTags")) {
    ext.withTags = ""
}

if (!project.hasProperty("withoutTags")) {
    ext.withoutTags = ""
}

if (!project.hasProperty("failScreenshot")) {
    ext.failScreenshot = ""
}

if (!project.hasProperty("runHeadless")) {
    ext.runHeadless = ""
}

// TODO: rename these to "e2e"
if (!project.hasProperty("testscript")) {
    ext.testscript = ""
}

if (!project.hasProperty("testcase")) {
    ext.testcase = ""
}

if (!project.hasProperty("testverbose")) {
    ext.testverbose = ""
}

task e2eTest(type: NpmTask, dependsOn: 'npmInstall') {

    doFirst {
        if (testTargetUrl.isEmpty()) {
            throw new GradleException('testTargetUrl property was empty, it is mandatory for e2eTests')
        }
        if (testDataUrl.isEmpty()) {
            throw new GradleException('testDataUrl property was empty, it is mandatory for e2eTests')
        }
    }

    inputs.files fileTree("frontend/") { exclude("dist/", "node_modules/.cache/") }
    outputs.dir("frontend/dist")

    args = ['run', 'test:e2e', '--', '--url=' + testTargetUrl, '--testdata=' + testDataUrl, '--tag=' + withTags, '--skiptags=' + withoutTags]

    if (!testverbose.isEmpty()) {
        if (testverbose == "true") {
            args.add("--verbose")
        }
    }

    if (!runHeadless.isEmpty()) {
      if (runHeadless == "true") {
          args.add("--headless")
      }
    }

    if (!failScreenshot.isEmpty()) {
      if (failScreenshot == "true") {
        args.add("--env screenshot")
      }
    }

    // (at least if testcase name has spaces) wrap name in quotes, e.g. -Ptestcase "Security server client add wsdl service"
    if (!testcase.isEmpty()) {
        if (testscript.isEmpty()) {
            // to run specific testcase, your need to also define -Ptestscript, otherwise nightwatch ignores this parameter
            throw new GradleException('Tried to use -Ptestcase without -Ptestscript, that will not work.')
        }
        args.add("--testcase=" + testcase);
        println 'set testcase arg to value [' + testcase + ']'

    }

    if (!testscript.isEmpty()) {
        args.add("--test=" + testscript)
    }

    execOverrides {
        it.workingDir = 'frontend'
    }
}

if (!project.hasProperty('skip-frontend-build')) {
  // checkFrontLicense -> checkFrontAudit -> buildFront -> frontendUnitTests -> processResources
  processResources.dependsOn 'buildFront'
  check.dependsOn checkFrontLicense
  check.dependsOn frontendUnitTests
  if (project.hasProperty('frontend-npm-audit')) {
    npmInstallDeps.dependsOn checkFrontAudit
  }
}

clean.delete << file('frontend/node_modules')
clean.delete << file('frontend/dist')

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$projectDir/src/main/resources/openapi-definition.yaml".toString()
    outputDir = "$buildDir/generated-sources/openapi".toString()
    apiPackage = "org.niis.xroad.securityserver.restapi.openapi"
    modelPackage = "org.niis.xroad.securityserver.restapi.openapi.model"
    globalProperties = [
        modelDocs: "false",
        apis     : "", // must use empty strings instead of "true":
        // https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin
        models   : "",
        generateSupportingFiles : "true",
        supportingFiles: 'ApiUtil.java'
    ]
    configOptions = [
        interfaceOnly: "true",
        useTags      : "true",
        documentationProvider: "none",
        skipDefaultInterface : "true",
        openApiNullable: "false"
    ]
}

// Fix up to date check
tasks.openApiGenerate {
    inputs.files(openApiGenerate.inputSpec)
    outputs.dir(openApiGenerate.outputDir)
}

compileJava.dependsOn tasks.openApiGenerate

// set license format to ignore generated java sources
task licenseFormatJava(type: nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
}

task licenseTestJava(type: nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
    check = true
}

licenseFormatMain.enabled = false
licenseMain.enabled = false

licenseFormat.dependsOn licenseFormatJava
licenseTest.dependsOn licenseTestJava

jar {
    enabled = true
    archiveClassifier = 'plainDependency'
}

apiValidationParameters.apiDefinitionPaths = [
    "$projectDir/src/main/resources/openapi-definition.yaml".toString(),
    "$projectDir/src/main/resources/openapi-authentication.yaml".toString()
]

validateApiDefinitions {
    inputs.files("src/main/resources/openapi-definition.yaml", "src/main/resources/openapi-authentication.yaml")
    outputs.upToDateWhen { true }
}

tasks.openApiGenerate.dependsOn 'validateApiDefinitions'

task copyDeps(type: Copy) {
    into "$buildDir/unpacked-libs"
    from configurations.runtimeClasspath.find { it.name.startsWith("postgresql") }
}

assemble.dependsOn copyDeps

test {
    maxHeapSize = "1g"
}
