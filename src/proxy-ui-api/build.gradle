import org.niis.xroad.oasvalidatorplugin.Oas3ValidatorGradlePlugin

buildscript {
    ext {
        openapiGeneratorVersion = '4.2.1'
        nodePluginVersion = '2.2.4'
        nodeVersion = '12.16.3'
        swaggerParserVersion = '2.0.21'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'io.spring.dependency-management'
    id 'org.springframework.boot'
    id 'com.github.node-gradle.node' version "$nodePluginVersion"
    id 'org.openapi.generator' version "$openapiGeneratorVersion"
}

ext {
    set('springCloudVersion', "Hoxton.SR9")
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'build/generated-sources/openapi/src/main/java']
    }
}

apply plugin: 'com.github.hierynomus.license'
apply plugin: Oas3ValidatorGradlePlugin

bootRun {
    jvmArgs = ["-Dspring.output.ansi.enabled=ALWAYS"]
    if (project.hasProperty('args')) {
        def params = project.args.tokenize(',')
        args = params
    }
}

bootJar {
    excludeDevtools = true
}

processResources {
    from('frontend/dist/') {
        into 'public/'
    }
}

node {
    download = true
    version = nodeVersion
    nodeModulesDir = file("frontend")
}

task buildFront(type: NpmTask) {
    onlyIf {
        !project.hasProperty('skip-frontend-build')
    }
    inputs.files fileTree("frontend/") { exclude("dist/", "node_modules/.cache/") }
    outputs.dir("frontend/dist")
    args = ['run', 'build']
    execOverrides {
        it.workingDir = 'frontend'
    }
}

task checkFrontAudit(type: NpmTask, dependsOn: 'npmInstall') {
    onlyIf {
        (!project.hasProperty('skip-frontend-build') && !project.hasProperty('skip-frontend-audit'))
    }
    inputs.files fileTree("frontend/") { exclude("dist/", "node_modules/.cache/") }
    outputs.dir("frontend/dist")
    if (project.hasProperty('strict-frontend-audit')) {
        // do a strict front audit with npm run check-audit
        // check-audit uses ignore list from audit-resolve.json
        // To update that, do "npm run resolve-audit" from frontend dir
        args = ['run', 'check-audit']
    } else {
        // do a loose front audit with npm in-built audit
        args = ['audit', '--production', '--audit-level=moderate']
    }
    execOverrides {
        it.workingDir = 'frontend'
    }
}

// check that npm run license-check passes
task checkFrontLicense(type: NpmTask, dependsOn: 'npmInstall') {
    onlyIf {
        !project.hasProperty('skip-frontend-build')
    }
    inputs.files("frontend/src/", "frontend/test/", "frontend/public/")
    outputs.upToDateWhen { true }
    args = ['run', 'license-check']
    execOverrides {
        it.workingDir = 'frontend'
    }
}

// run e2e tests vs remote url
if (!project.hasProperty("testTargetUrl")) {
    ext.testTargetUrl = ""
}

if (!project.hasProperty("testDataUrl")) {
    ext.testDataUrl = ""
}

if (!project.hasProperty("withTags")) {
    ext.withTags = ""
}

if (!project.hasProperty("withoutTags")) {
    ext.withoutTags = ""
}

if (!project.hasProperty("failScreenshot")) {
    ext.failScreenshot = ""
}

if (!project.hasProperty("runHeadless")) {
    ext.runHeadless = ""
}



task e2eTest(type: NpmTask, dependsOn: 'npmInstall') {

    doFirst {
        if (testTargetUrl.isEmpty()) {
            throw new GradleException('testTargetUrl property was empty, it is mandatory for e2eTests')
        }
        if (testDataUrl.isEmpty()) {
            throw new GradleException('testDataUrl property was empty, it is mandatory for e2eTests')
        }       
    }

    inputs.files fileTree("frontend/") { exclude("dist/", "node_modules/.cache/") }
    outputs.dir("frontend/dist")

    args = ['run', 'test:e2e', '--', '--url=' + testTargetUrl, '--testdata=' + testDataUrl, '--tag=' + withTags, '--skiptags=' + withoutTags]

    if (!runHeadless.isEmpty()) {
      if (runHeadless == "true") {
        args += "--headless"
      }
    }

    if (!failScreenshot.isEmpty()) {
      if (failScreenshot == "true") {
        args += "--env screenshot"
      }
    }
    
    execOverrides {
        it.workingDir = 'frontend'
    }
}

npmInstall.onlyIf { !project.hasProperty('skip-frontend-build') }

// checkFrontLicense -> checkFrontAudit -> buildFront -> processResources
processResources.dependsOn 'buildFront'
buildFront.dependsOn 'checkFrontAudit'
checkFrontAudit.dependsOn 'checkFrontLicense'

clean.delete << file('frontend/node_modules')
clean.delete << file('frontend/dist')

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$projectDir/src/main/resources/openapi-definition.yaml".toString()
    outputDir = "$buildDir/generated-sources/openapi".toString()
    apiPackage = "org.niis.xroad.restapi.openapi"
    modelPackage = "org.niis.xroad.restapi.openapi.model"
    systemProperties = [
        modelDocs: "false",
        apis     : "", // must use empty strings instead of "true":
        // https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin
        models   : ""
    ]
    configOptions = [
        interfaceOnly: "true",
        useTags      : "true"
    ]
}

// Fix up to date check
tasks.openApiGenerate {
    inputs.files(openApiGenerate.inputSpec)
    outputs.dir(openApiGenerate.outputDir)
}

compileJava.dependsOn tasks.openApiGenerate

// set license format to ignore generated java sources
task licenseFormatJava(type: nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
}

task licenseTestJava(type: nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
    check = true
}

licenseFormatMain.enabled = false
licenseMain.enabled = false

licenseFormat.dependsOn licenseFormatJava
licenseTest.dependsOn licenseTestJava

jar {
    enabled = true
    archiveClassifier = 'plainDependency'
}

apiValidationParameters.apiDefinitionPaths = [
    "$projectDir/src/main/resources/openapi-definition.yaml".toString(),
    "$projectDir/src/main/resources/openapi-authentication.yaml".toString()
]

validateApiDefinitions {
    inputs.files("src/main/resources/openapi-definition.yaml", "src/main/resources/openapi-authentication.yaml")
    outputs.upToDateWhen { true }
}

tasks.openApiGenerate.dependsOn 'validateApiDefinitions'

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation project(':common-util')
    implementation project(':common-verifier')
    implementation project(':signer-protocol')
    implementation project(':serverconf')
    implementation project(':common-ui')


    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation('org.springframework.cloud:spring-cloud-starter-sleuth')
    implementation('org.kohsuke:libpam4j:1.11')
    implementation('org.apache.commons:commons-compress:1.20')
    implementation('wsdl4j:wsdl4j:1.6.3')
    implementation('com.github.vladimir-bukhtoyarov:bucket4j-core:4.10.0')
    implementation("io.swagger.parser.v3:swagger-parser-v3:${swaggerParserVersion}")
    implementation('io.swagger:swagger-annotations:1.6.2')

    testImplementation project(':common-test')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation('org.hsqldb:hsqldb')

    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    implementation('org.openapitools:jackson-databind-nullable:0.2.1')
    implementation('javax.validation:validation-api')
    // /openapi-generator related
}

task copyDeps(type: Copy) {
    into "$buildDir/unpacked-libs"
    from configurations.runtimeClasspath.find { it.name.startsWith("postgresql") }
}

build.dependsOn copyDeps

test {
    maxHeapSize = "1g"
}
