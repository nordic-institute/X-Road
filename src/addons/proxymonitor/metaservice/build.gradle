plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow'
}

project.ext.schemaTargetDir = new File("$buildDir/generated-sources")

sourceSets {
    main {
        java.srcDirs = ["src/main/java", "$buildDir/generated-sources"]
        resources.srcDirs = ['src/main/resources', '../../../common/common-util/src/main/resources']
    }
}

dependencies {
    implementation project(':proxy')
    implementation project(':common:common-util')
    implementation project(":serverconf")
    implementation project(":common:common-op-monitoring")
    implementation project(":common:common-verifier")

    implementation project(':monitor-common')
    implementation project(':monitoring-conf')
    implementation project(':addons:proxymonitor-common')

    implementation "com.google.guava:guava:$guavaVersion"

    testImplementation project(path: ':common:common-util', configuration: 'testArtifacts')
    testImplementation project(path: ":proxy", configuration: 'testArtifacts')
    testImplementation project(':common:common-test')
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

tasks.register('createDirs') {
    doLast {
        project.ext.schemaTargetDir.mkdirs()
    }
}

jar {
    enabled = false
}

shadowJar {
    archiveClassifier = ''
    exclude('**/module-info.class')
    dependencies {
        include(project(':addons:proxymonitor-common'))
        include(project(':monitor-common'))
        include(project(':monitoring-conf'))
    }
    mergeServiceFiles()
}

build.dependsOn shadowJar

compileJava.dependsOn processResources

tasks.register('runProxymonitorMetaserviceTest', JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug',
            '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
    }

    jvmArgs '-Dxroad.proxy.ocspCachePath=build/ocsp-cache',
        '-Dxroad.tempFiles.path=build/attach-tmp',
        '-Dxroad.proxy.configurationFile=../../systemtest/conf/local_test/serverconf_producer.xml',
        '-Dxroad.proxy.jetty-serverproxy-configuration-file=src/test/resources/serverproxy.xml',
        '-Dxroad.proxy.jetty-clientproxy-configuration-file=src/test/resources/clientproxy.xml',
        '-Dlogback.configurationFile=src/test/resources/logback-metaservicetest.xml',
        '-Dxroad.proxy.jetty-ocsp-responder-configuration-file=src/test/resources/ocsp-responder.xml',
        '-Dxroad.proxy.client-connector-so-linger=-1',
        '-Dxroad.proxy.client-httpclient-so-linger=-1',
        '-Dxroad.proxy.server-connector-so-linger=-1',
        '-Dxroad.proxy.serverServiceHandlers=ee.ria.xroad.proxy.serverproxy.ProxyMonitorServiceHandlerImpl',
        '-Dxroad.common.grpc-internal-tls-enabled=false'

    mainClass = 'ee.ria.xroad.proxy.testsuite.ProxyTestSuite'
    classpath = sourceSets.test.runtimeClasspath
}

jacoco {
    applyTo runProxymonitorMetaserviceTest
}
