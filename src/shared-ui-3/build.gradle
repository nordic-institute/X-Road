plugins {
    id 'base'
    id 'org.siouan.frontend-jdk17' version "$frontendVersion"
}

configurations {
    npm { canBeConsumed(true); canBeResolved(false) }
}

frontend {
  nodeVersion = frontendNodeVersion
  cacheDirectory = file("${projectDir}/.gradle/yarn-cache")

  var nodeDir = file("${rootDir}/.gradle/yarn-node/${frontendNodeVersion}")
  nodeInstallDirectory = nodeDir
  if(nodeDir.exists()){
    nodeDistributionProvided = true
  }

  if (System.getenv().containsKey("CI")) {
    installScript='install --immutable'
  }

  cleanScript = null
}

import org.siouan.frontendgradleplugin.infrastructure.gradle.RunYarn

var archive = 'niis-shared-ui-3.0.0.tgz'

task yarnBuild(type: RunYarn, dependsOn: installFrontend) {
  inputs.files(
    'src/',
    'public/',
    'svg-icons/',
    'package.json',
    'yarn.lock',
    'vite.config.js',
    'tsconfig.json',
    fileTree('node_modules') {
      exclude '.cache'
    }
  )
  outputs.dir('dist')
  script = 'run build'
}

task yarnPack(type: RunYarn, dependsOn: yarnBuild) {
  inputs.files("dist")
  outputs.file(archive)
  script = "pack --out ${archive}"
}

task checkFrontAudit(type: RunYarn, dependsOn: installFrontend) {
  inputs.files(
    'package.json',
    'yarn.lock'
  )
  outputs.files("${buildDir}/reports/audit-ci.txt")
  script = 'run npx-check-audit'
}

// check that npm run license-check passes
task checkFrontLicense(type: RunYarn, dependsOn: installFrontend) {
  inputs.files("LICENSE.txt", "src/", "test/", "public/")
  outputs.upToDateWhen { true }
  script = 'run license-check'
}

clean {
  delete file(archive)
  delete file('dist')
}

assemble.dependsOn yarnPack
check.dependsOn checkFrontLicense

if (project.hasProperty('frontend-npm-audit')) {
  yarnBuild.dependsOn checkFrontAudit
}

artifacts {
  npm(file(archive)) {
    builtBy(yarnPack)
  }
}
