/*
 * The MIT License
 *
 * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)
 * Copyright (c) 2018 Estonian Information System Authority (RIA),
 * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)
 * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

plugins {
    alias(libs.plugins.shadow)
}

dependencies {
    implementation(platform(libs.springBoot.bom))

    implementation project(':common:common-globalconf')
    implementation project(':common:common-scheduler')
    implementation project(':common:common-jetty')
    implementation project(':common:common-verifier')
    implementation project(':common:common-rpc')

    implementation('org.springframework:spring-context')
    implementation('org.springframework:spring-context-support')
    implementation libs.commons.cli

    testImplementation project(':common:common-test')
    testImplementation libs.wiremock.standalone
}

ext {
    mainClassName = 'org.niis.xroad.confclient.ConfClientDaemonMain'
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    archiveBaseName = 'configuration-client'
}

shadowJar {
    exclude('**/module-info.class')
    archiveClassifier = ''
    archiveBaseName = 'configuration-client'
    mergeServiceFiles()
}

jar.enabled = false

build {
    dependsOn shadowJar
}

tasks.register('runConfigurationClient', JavaExec) {
    jvmArgs '-Dxroad.conf.path=build/',
        '-Dxroad.distributedfiles.signatureFreshness=-1' // disable freshness checking since we read local file
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
}

