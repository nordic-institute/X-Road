plugins {
    alias(libs.plugins.springBoot)
    id 'maven-publish'
}

// TODO xroad8 refactor to work without shadowjar
//publishing {
//    publications {
//        shadow(MavenPublication) { publication ->
//            project.shadow.component(publication)
//            groupId = 'org.niis.xroad'
//            artifactId = "configuration-client"
//            version = xroadVersion + ("RELEASE".equals(xroadBuildType) ? "": "-SNAPSHOT")
//        }
//    }
//    repositories {
//        maven {
//            url = xroadPublishUrl
//            credentials {
//                username = xroadPublishUser
//                password = xroadPublishApiKey
//            }
//            authentication {
//                basic(BasicAuthentication)
//            }
//        }
//    }
//}

dependencies {
    implementation(platform(libs.springCloud.bom))

    implementation project(':common:common-core')
    implementation project(':common:common-rpc')
    implementation project(':configuration-client:core')

    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.cloud:spring-cloud-config-client")

    testImplementation project(':common:common-test')
}

ext {
    mainClassName = 'org.niis.xroad.confclient.ConfClientDaemonMain'
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

bootJar {
    enabled = true
    archiveBaseName = 'configuration-client'

    manifest {
        attributes(
            'Implementation-Title': 'X-Road GlobalConf client',
            'Implementation-Version': "$xroadVersion-$xroadBuildType",
            'Main-Class': 'org.springframework.boot.loader.launch.PropertiesLauncher'
        )
    }
}

jar.enabled = false

tasks.register('runConfigurationClient', JavaExec) {
    jvmArgs '-Dxroad.conf.path=build/',
        '-Dxroad.distributedfiles.signatureFreshness=-1' // disable freshness checking since we read local file
    mainClass = mainClassName
    classpath = sourceSets.main.runtimeClasspath
}

