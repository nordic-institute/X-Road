plugins {
    id 'com.github.johnrengelman.shadow'
}

project.ext.schemaTargetDir = new File("$buildDir/generated-sources")

configurations {
    xjc
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', "${buildDir}/generated-sources"]
        resources.srcDirs = ['src/main/resources', '../common/common-util/src/main/resources']
    }
}

dependencies {
    implementation "jakarta.validation:jakarta.validation-api:$jakartaValidationApiVersion"
    implementation "io.dropwizard.metrics:metrics-core:$metricsVersion"
    implementation "io.dropwizard.metrics:metrics-jmx:$metricsVersion"

    implementation project(':common:common-verifier')
    implementation project(':common:common-util')
    implementation project(':common:common-db')
    implementation project(':common:common-op-monitoring')
    implementation project(':monitoring-conf')

    // Using HSQLDB for an in-memory database in tests.
    testImplementation "org.hsqldb:hsqldb:$hsqldbVersion"
    testImplementation "commons-cli:commons-cli:$commonsCliVersion"

    xjc "org.glassfish.jaxb:jaxb-xjc:$jaxbVersion"
    xjc "org.glassfish.jaxb:jaxb-runtime:$jaxbVersion"
}

tasks.register('createDirs') {
    doLast {
        project.ext.schemaTargetDir.mkdirs()
    }
}

tasks.register('xjc') {
    inputs.files fileTree(dir: 'src/main/resources', include: '*.xsd')
    outputs.dir schemaTargetDir

    doLast {
        ant.taskdef(name: 'xjc',
            classname: 'com.sun.tools.xjc.XJCTask',
            classpath: configurations.xjc.asPath)

        // Generate classes for query operational data and health data messages.
        ant.xjc(
            destdir: project.ext.schemaTargetDir,
            package: 'ee.ria.xroad.opmonitordaemon.message',
            schema: "${buildDir}/resources/main/op-monitoring.xsd",
            binding: "${buildDir}/resources/main/identifiers-bindings.xml"
        )
    }
}

shadowJar {
    archiveClassifier = ''
    exclude('**/module-info.class')
    manifest {
        attributes 'Main-Class': 'ee.ria.xroad.opmonitordaemon.OpMonitorDaemonMain'
    }
    mergeServiceFiles()
}

tasks.register('testsJar', Jar) {
    dependsOn testClasses
    archiveClassifier = 'tests'
    manifest {
        attributes 'Main-Class': 'ee.ria.xroad.opmonitordaemon.OperationalDataRecordsGenerator'
    }
    from {
        sourceSets.test.output
    }
}

jar.enabled = false
assemble.dependsOn shadowJar
assemble.dependsOn testsJar

xjc.dependsOn createDirs
xjc.dependsOn processResources
xjc.mustRunAfter processResources

compileJava.dependsOn xjc
compileJava.dependsOn processResources
