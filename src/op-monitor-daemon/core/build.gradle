plugins {
    id 'java-library'
}

project.ext.schemaTargetDir = layout.buildDirectory.dir("generated-sources").get().asFile

configurations {
    xjc
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', schemaTargetDir]
        resources.srcDirs = ['src/main/resources', '../../common/common-domain/src/main/resources']
    }
}

dependencies {
    annotationProcessor(libs.mapstructProcessor)
    annotationProcessor(libs.lombokMapstructBinding)

    implementation libs.jakarta.validationApi
    implementation libs.bundles.metrics
    implementation(libs.mapstruct)

    implementation project(':common:common-domain')
    implementation project(':common:common-scheduler')
    implementation project(':common:common-verifier')
    implementation project(':common:common-jetty')
    implementation project(':common:common-db')
    implementation project(':common:common-op-monitoring')

    // Using HSQLDB for an in-memory database in tests.
    testImplementation libs.hsqldb
    testImplementation libs.mockito.core
    testImplementation libs.commons.cli

    xjc libs.bundles.jaxb
}

tasks.register('createDirs') {
    doLast {
        project.ext.schemaTargetDir.mkdirs()
    }
}

tasks.register('xjc') {
    inputs.files fileTree(dir: 'src/main/resources', include: '*.xsd')
    outputs.dir schemaTargetDir

    doLast {
        ant.taskdef(name: 'xjc',
            classname: 'com.sun.tools.xjc.XJCTask',
            classpath: configurations.xjc.asPath)

        // Generate classes for query operational data and health data messages.
        ant.xjc(
            destdir: project.ext.schemaTargetDir,
            package: 'ee.ria.xroad.opmonitordaemon.message',
            schema: "${layout.buildDirectory.get().asFile}/resources/main/op-monitoring.xsd",
            binding: "${layout.buildDirectory.get().asFile}/resources/main/identifiers-bindings.xml"
        )
    }
}
jar {
    archiveBaseName = 'op-monitor-daemon-core'
}

tasks.register('testsJar', Jar) {
    dependsOn testClasses
    archiveBaseName = 'op-monitor-daemon-core'
    archiveClassifier = 'tests'
    manifest {
        attributes 'Main-Class': 'ee.ria.xroad.opmonitordaemon.OperationalDataRecordsGenerator'
    }
    from {
        sourceSets.test.output
    }
}

assemble.dependsOn testsJar

xjc.dependsOn createDirs
xjc.dependsOn processResources
xjc.mustRunAfter processResources

compileJava.dependsOn xjc
compileJava.dependsOn processResources
