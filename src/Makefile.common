ifndef ARCH_DIR
  ARCH := $(shell uname -m)

  ifeq ($(ARCH),x86_64)
      ARCH_DIR := amd64
  else ifeq ($(ARCH),aarch64)
      ARCH_DIR := arm64
  else
      $(error Unsupported architecture: $(ARCH))
  endif
endif

ifndef COMMON_CFLAGS

COMMON_CFLAGS += -W -Wall -Wundef -Wcast-align -fno-strict-aliasing

ifndef MAKEFILE_COMMON_NO_OPT
COMMON_CFLAGS += -O
endif

ifndef MAKEFILE_COMMON_NO_DEBUG
COMMON_CFLAGS += -g
endif

COMMON_CFLAGS += -Werror

endif

# Position Independent Code - all code being dynamically linked.
ifdef USE_PIC
COMMON_CFLAGS += -fPIC -DPIC
endif

CFLAGS += $(COMMON_CFLAGS)
CXXFLAGS += $(COMMON_CFLAGS)

ifndef CC
CC = gcc
endif

ifndef CXX
CXX = g++
endif

AR = ar
RANLIB = ranlib

tests: $(TEST_PROGRAMS)

check: tests
	@for i in $(AUTOMATIC_TESTS); \
	do \
		echo "Running $$i"; \
		if LD_LIBRARY_PATH=$(XROADTOP)/libs "./$$i"; \
		then \
			echo; echo; echo "Test was OK"; echo; \
		else \
			echo; echo; echo "TEST $$i FAILED!!!!!"; echo;\
			exit 1; \
		fi; \
	done

install: all $(INSTALL_EXTRA)
	(mkdir -p $(XROADTOP)/libs/$(LIBRARY_NAME)/$(ARCH_DIR) && \
		install -m 644  $(LIBRARY) $(XROADTOP)/libs/$(LIBRARY_NAME)/$(ARCH_DIR)) || exit 1


# Automatic dependencies, which are created according to availability:

MAKEFILE_COMMON_DEP_SOURCES = $(wildcard *.c *.cc *.cpp)

.deps/%.c.dep: %.c
	@test -d .deps || mkdir .deps ; \
	if $(CC) $(CPPFLAGS) $(CFLAGS) -M $< > $@.tmp 2> /dev/null ; then \
		sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.tmp > $@ ; \
	else \
		echo "Cannot create dependency info for $< yet" ; \
	fi ; \
	$(RM) $@.tmp

.deps/%.cc.dep: %.cc
	@test -d .deps || mkdir .deps ; \
	if $(CXX) $(CPPFLAGS) $(CXXFLAGS) -M $< > $@.tmp 2> /dev/null ; then \
		sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.tmp > $@ ; \
	else \
		echo "Cannot create dependency info for $< yet" ; \
	fi ; \
	$(RM) $@.tmp

.deps/%.cpp.dep: %.cpp
	@test -d .deps || mkdir .deps ; \
	test -d .deps/.ui || mkdir .deps/.ui ; \
	test -d .deps/.moc || mkdir .deps/.moc ; \
	if $(CXX) $(CPPFLAGS) $(CXXFLAGS) -M $< > $@.tmp 2> /dev/null ; then \
		sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.tmp > $@ ; \
	else \
		echo "Cannot create dependency info for $< yet" ; \
	fi ; \
	$(RM) $@.tmp

# Avoid updating dependencies for clean target:
ifneq ($(MAKECMDGOALS), clean)
ifneq ($(strip $(MAKEFILE_COMMON_DEP_SOURCES)),)
-include $(MAKEFILE_COMMON_DEP_SOURCES:%=.deps/%.dep)
endif
endif

clean: clean-deps

clean-deps:
	rm -rf .deps

# Forbid parallel make if we are building a library, to avoid multiple processes updating the same .a file
# simultaneously.
ifneq ($(strip $(LIBRARY)),)
.NOTPARALLEL:
endif
