plugins {
    alias(libs.plugins.springBoot)
}

dependencies {
    implementation(platform(libs.springCloud.bom))

    implementation(project(':proxy:core'))
    implementation(project(':common:common-service-bootstrap'))
    implementation(project(':common:common-core'))
    implementation(project(':common:common-rpc'))

    implementation(project(':addons:messagelog:messagelog-db'))
    implementation(project(':addons:messagelog:messagelog-addon:core'))
    implementation(project(':addons:messagelog:messagelog-addon:asic'))

    testImplementation(libs.hsqldb)
    testImplementation(libs.restAssured)

    testImplementation(project(':common:common-domain'))
    testImplementation(project(':common:common-globalconf'))
    testImplementation(project(':common:common-jetty'))
    testImplementation(project(':common:common-keyconf'))
    testImplementation(project(':common:common-message'))
    testImplementation(project(':common:common-test'))
    testImplementation(project(':common:common-verifier'))
    testImplementation(project(':serverconf'))
    testImplementation(project(':security-server:ds-client'))
    testImplementation(project(path: ":proxy:core", configuration: 'testArtifacts'))

    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

jar {
    enabled = false
}

bootJar {
    enabled = true
    archiveBaseName = 'proxy'
    manifest {
        attributes(
            'Implementation-Title': 'X-Road Proxy',
            'Implementation-Version': "$xroadVersion-$xroadBuildType",
            'Main-Class': 'org.springframework.boot.loader.launch.PropertiesLauncher'
        )
    }
}

testJar.enabled = true

apply plugin: "jacoco"

test {
    useJUnit {
        excludeCategories 'ee.ria.xroad.proxy.testutil.IntegrationTest'
    }
    jacoco {
        destinationFile = file("build/jacoco/unitTest.exec")
    }
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    shouldRunAfter test
    jacoco {
        destinationFile = file("build/jacoco/integrationTest.exec")
    }
    useJUnit {
        includeCategories 'ee.ria.xroad.proxy.testutil.IntegrationTest'
    }
    reports {
        junitXml.includeSystemOutLog = false // defaults to true
    }
}

tasks.register('runProxyTest', JavaExec) {
    group = "verification"
    shouldRunAfter integrationTest
    jvmArgs '-Xmx2g',
        "-Dxroad.proxy.ocspCachePath=build/ocsp-cache",
        "-Dxroad.tempFiles.path=build/attach-tmp",
        '-Dlogback.configurationFile=src/test/logback-proxytest.xml',
        '-Dxroad.proxy.grpc-tls-enabled=false'
//      '-Djava.security.properties==src/main/resources/java.security'

    mainClass = 'ee.ria.xroad.proxy.testsuite.ProxyTestSuite'
    classpath = sourceSets.test.runtimeClasspath
}

jacoco {
    applyTo runProxyTest
}

check.dependsOn integrationTest
