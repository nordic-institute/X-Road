plugins {
    id("xroad.java-conventions")
    id("xroad.java-exec-conventions")
    id("xroad.int-test-conventions")
}

sourceSets {
    intTest {
        resources {
            srcDir '../../common/common-int-test/src/main/resources/'
        }
    }
}

dependencies {
    implementation(platform(libs.springBoot.bom))

    implementation(project(':common:common-jetty'))
    implementation(project(':common:common-message'))
    implementation(project(':common:common-scheduler'))
    api(project(':lib:globalconf-spring'))
    implementation(project(':serverconf'))
    implementation(project(':signer-protocol'))
    implementation(project(':common:common-messagelog'))
    implementation(project(':common:common-op-monitoring'))

    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")
    implementation('org.springframework:spring-context-support')
    implementation(libs.jetty.xml)
    implementation(libs.xerces.impl)
    implementation(libs.semver4j)

    testImplementation(project(':common:common-test'))

    testImplementation(libs.wsdl4j)
    intTestRuntimeOnly(project(':signer:application'))
    intTestImplementation(project(":common:common-test"))
    intTestImplementation(project(":common:common-int-test"))
}

jar {
    archiveBaseName = 'proxy-core'
}

tasks.register('testJar', Jar) {
    archiveBaseName = 'proxy-core'
    archiveClassifier = 'test'

    from sourceSets.test.output
}

configurations {
    testArtifacts.extendsFrom testRuntime
}

artifacts {
    testArtifacts testJar
}

apply plugin: "jacoco"

test {
    useJUnit {
        excludeCategories 'ee.ria.xroad.proxy.testutil.IntegrationTest'
    }
    jacoco {
        destinationFile = file("build/jacoco/unitTest.exec")
    }
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    shouldRunAfter test
    jacoco {
        destinationFile = file("build/jacoco/integrationTest.exec")
    }
    useJUnit {
        includeCategories 'ee.ria.xroad.proxy.testutil.IntegrationTest'
    }
    reports {
        junitXml.includeSystemOutLog = false // defaults to true
    }
}

tasks.register('runBatchSigner', JavaExec) {
    jvmArgs '-Dlogback.configurationFile=src/test/logback-batchsigner.xml'

    mainClass = 'ee.ria.xroad.common.signature.BatchSigner'
    classpath = sourceSets.test.runtimeClasspath
}

check.dependsOn integrationTest

tasks.register('intTest', Test) {
    useJUnitPlatform()
    dependsOn(':signer:application:shadowJar')

    setDescription("Runs integration tests.")
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath

    def intTestArgs = []
    if (project.hasProperty('intTestProfilesInclude')) {
        intTestArgs += "-Dspring.profiles.include=" + project.getProperty('intTestProfilesInclude')
    }

    jvmArgs intTestArgs
    testLogging {
        showStackTraces(true)
        showExceptions(true)
        showCauses(true)
        showStandardStreams(true)
    }
    reports {
        junitXml.includeSystemOutLog = false // defaults to true
    }
}

tasks.named('check') {
    dependsOn tasks.named('intTest')
}
