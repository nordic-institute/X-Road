import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id("java")
    id("application")
    alias(libs.plugins.shadow)
}

configurations {
    sqlDependencies

    configureEach {
        exclude group: 'org.eclipse.edc', module: 'jetty-core'
        exclude group: 'com.apicatalog', module: 'titanium-json-ld-jre8' //transient dep that creates errors
    }
}

dependencies {
    implementation(libs.edc.spi.core) // we need some constants
    implementation(libs.bundles.controlplane)
    runtimeOnly(libs.edc.controlplane.services)
    implementation(libs.edc.core.connector)
    runtimeOnly(libs.edc.config.filesystem)
    runtimeOnly(libs.edc.vault.hashicorp)
    runtimeOnly(libs.bundles.dpf)
    runtimeOnly(libs.edc.api.version)

    sqlDependencies(libs.bundles.sql.edc)
    sqlDependencies(libs.bundles.sql.fc)

    implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.38.0'

    // x-road extensions
    implementation(project(":security-server:edc:extensions:common:xroad-conf"))
    implementation(project(":security-server:edc:extensions:common:xroad-jsonld"))
    implementation(project(":security-server:edc:extensions:control-plane:xroad-edr"))
    implementation(project(":security-server:edc:extensions:control-plane:xroad-policy"))
    implementation(project(":security-server:edc:extensions:control-plane:xroad-identity-and-trust"))
    implementation(project(":security-server:edc:extensions:common:xroad-jws-signer")) {
        exclude group: 'org.eclipse.jetty'
    }
    implementation(project(":security-server:edc:extensions:common:xroad-webserver"))

    implementation libs.apache.commonsLang3

    testImplementation libs.edc.junit
    testImplementation libs.mockito.jupiter
    testImplementation libs.edc.lib.jsonld
}

application {
    mainClass.set("org.eclipse.edc.boot.system.runtime.BaseRuntime")
}


var distTar = tasks.named("distTar")
var distZip = tasks.named("distZip")

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
        }
    }
}

shadowJar {
    mergeServiceFiles()
    archiveFileName.set("edc-control-plane-inmemory.jar")
    dependsOn(distTar, distZip)
}

tasks.register('shadowJarWithSql', ShadowJar) {
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath, project.configurations.sqlDependencies]
    exclude('META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA')
    archiveFileName.set("edc-control-plane.jar")
    manifest {
        attributes 'Main-Class': 'org.eclipse.edc.boot.system.runtime.BaseRuntime'
    }
    mergeServiceFiles()
    dependsOn(distTar, distZip)
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

archUnit {
    skip = true
}

assemble.dependsOn("shadowJarWithSql")
