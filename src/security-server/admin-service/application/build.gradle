plugins {
    alias(libs.plugins.springBoot)
}

base {
    archivesName = 'proxy-ui-api'
}

configurations {
    dist {
        canBeConsumed = false
        canBeResolved = true
    }
}

configurations.configureEach {
    exclude(module: 'jetty-jakarta-servlet-api')
}

dependencies {
    dist(project(path: ":security-server:admin-service:ui", configuration: "dist"))

    implementation(platform(libs.springBoot.bom))
    implementation(platform(libs.springCloud.bom))

    implementation(project(":common:common-globalconf"))
    implementation(project(":signer-protocol"))
    implementation(project(":serverconf"))
    implementation(project(":common:common-admin-api"))
    implementation(project(":common:common-management-request"))
    implementation(project(':common:common-api-throttling'))
    implementation(project(":common:common-verifier"))
    implementation(project(":security-server:openapi-model"))

    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("io.micrometer:micrometer-tracing-bridge-brave")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    implementation(libs.libpam4j)
    implementation(libs.apache.commonsCompress)
    implementation(libs.wsdl4j)
    implementation(libs.bucket4j.core)
    implementation(libs.swagger.parserV3)
    implementation(libs.jakarta.validationApi)
    implementation(libs.logback.access)

    testImplementation(platform(libs.springBoot.bom))
    testImplementation(project(":common:common-test"))
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation(libs.hsqldb)
    testImplementation("org.springframework.cloud:spring-cloud-contract-wiremock")
    testImplementation(testFixtures(project(":common:common-api-throttling")))
    testRuntimeOnly(libs.junit.vintageEngine)
}

tasks.register('copyUi', ProcessResources) {
    dependsOn(configurations.dist)
    from configurations.dist
    into layout.buildDirectory.dir("admin-service/ui/public")
}

bootRun {
    jvmArgs = ["-Dspring.output.ansi.enabled=ALWAYS"]
    if (project.hasProperty('args')) {
        def params = project.args.tokenize(',')
        args = params
    }
}

jar {
    enabled = false
}

bootJar {
    enabled = true

    if (!project.hasProperty('skip-frontend-build')) {
        dependsOn copyUi
        classpath += layout.buildDirectory.dir("admin-service/ui")
    } else {
        println("Warning: Excluding frontend from boot jar")
    }
    manifest {
        attributes(
            'Implementation-Title': 'X-Road Security Server Admin Service',
            'Implementation-Version': "$xroadVersion-$xroadBuildType"
        )
    }
}

tasks.register('copyDeps', Copy) {
    into layout.buildDirectory.dir("unpacked-libs")
    from configurations.runtimeClasspath.find { it.name.startsWith("postgresql") }
}

assemble.dependsOn copyDeps

test {
    useJUnitPlatform()
    maxHeapSize = "1g"
}
