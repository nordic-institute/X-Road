name: Build and test
on: 
  # Capture this event so that gradle caches are updated when a PR is merged to develop
  # More information on why: https://github.com/gradle/gradle-build-action#using-the-caches-read-only
  push:
    branches:
      - develop
    paths:
      - 'src/**'
      - '.github/**'
      - 'ansible/**'
      - 'Docker/**'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src/**'
      - '.github/**'
      - 'ansible/**'
      - 'Docker/**'
permissions:
  contents: write # Required for https://github.com/gradle/actions/tree/main/setup-gradle#github-dependency-graph-support
  pull-requests: write # https://github.com/gradle/actions/tree/main/setup-gradle#adding-job-summary-as-a-pull-request-comment
  actions: read # Required for https://github.com/dorny/test-reporter
  checks: write # Required for https://github.com/dorny/test-reporter
# Cancels previous workflow run on PR if a new one is started (does not affect push to develop).
# This is because github.head_ref is empty on push events so defaults to the unique github.run_id.
# More info: https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  BuildAndPackageWithUnitTests:
    name: Build, test and package code
    runs-on: ubuntu-22.04
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Start Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: start-measurement
          label: 'Build, unit tests and packaging'
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # SonarCloud: Shallow clones should be disabled for a better relevancy of analysis
      - name: Ensure required packages
        env: 
          DEBIAN_FRONTEND: noninteractive # Less output to log
        run: sudo apt-get update && sudo apt-get install -y curl software-properties-common build-essential unzip debhelper devscripts
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/develop' }}
          gradle-home-cache-cleanup: true
          dependency-graph: generate-and-submit
          add-job-summary-as-pr-comment: always
      - name: Build, test and package code setup measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: get-measurement
          label: 'Build environment setup'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      - name: Build base docker images
        working-directory: ./deployment/security-server/docker/base
        run: |
          chmod +x build-base-images.sh
          ./build-base-images.sh localhost:5000
      - name: Build and test source
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        working-directory: ./src
        run: |
          echo "Current disk usage:"
          df -h
          mv -f ./service/signer/signer-int-test/src/intTest/resources/.env.github ./service/signer/signer-int-test/src/intTest/resources/.env
          echo "within docker"
          docker run --rm alpine df -h
          ./gradlew -Dorg.gradle.jvmargs=-Xmx6g -PsonarqubeHost=https://sonarcloud.io -PsonarqubeProjectKey=nordic-institute_X-Road -PsonarqubeOrganization=nordic-institute -PxroadBuildType=RELEASE --stacktrace build sonar test intTest jacocoTestReport -Pfrontend-npm-audit -PbuildImages=true -PxroadImageRegistry=localhost:5000
          echo "Current disk usage:"
          df -h
          mv -f ./service/signer/signer-int-test/src/intTest/resources/.env.github ./service/signer/signer-int-test/src/intTest/resources/.env
          echo "within docker"
          docker run --rm alpine df -h

      - name: Test report
        env:
          NODE_OPTIONS: '--max-old-space-size=6144'
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: Unit and integration tests
          path: src/**/build/test-results/**/TEST-*.xml
          reporter: java-junit
          list-suites: 'failed'
          list-tests: 'failed'
      - name: Upload intTest reports
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Integration Test reports
          path: |
            src/service/signer/signer-int-test/build/allure-report/
            src/service/signer/signer-int-test/build/container-logs/
      - name: Build, test and package code execution measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: get-measurement
          label: 'Build, unit tests and packaging'
      - name: Store files for arm packaging
        uses: pyTooling/upload-artifact@v4 # https://github.com/actions/upload-artifact/issues/38
        with:
          name: workspace-for-arm
          include-hidden-files: true
          path: |
            **
            !**/src/lib/**
            !**/src/test/**
            !**/build/classes/**
            !**/build/tmp/**
            !**/build/allure-**
            !**/build/test-results/**
            !**/build/reports/**
            !**/.git/**
            !**/.pnpm-store/**
            !**/pnpm-node/**
            !**/node_modules/**
            !**/executionHistory/**
      - name: Build RHEL8 packages
        run: docker build -t rhel8 ${{ github.workspace }}/src/packages/docker/rpm-el8/ && docker run --rm -u $(id -u ${USER}):$(id -g ${USER}) -v /etc/passwd:/etc/passwd:ro -v /etc/group:/etc/group:ro -v ${{ github.workspace }}:/workspace rhel8 ./src/packages/build-rpm.sh
      - name: Build RHEL9 packages
        run: docker build -t rhel9 ${{ github.workspace }}/src/packages/docker/rpm-el9/ && docker run --rm -u $(id -u ${USER}):$(id -g ${USER}) -v /etc/passwd:/etc/passwd:ro -v /etc/group:/etc/group:ro -v ${{ github.workspace }}:/workspace rhel9 ./src/packages/build-rpm.sh
      - name: Build 22.04 (Jammy) packages
        env:
          DEBEMAIL: 'info@niis.org'
          DEBFULLNAME: 'NIIS'
        run: |
          echo "Current disk usage (before jammy build):"
          df -h
          ./src/packages/build-deb.sh jammy -release
          echo "Current disk usage (after jammy build):"
          df -h
      - name: Build 24.04 (Noble) packages
        env:
          DEBEMAIL: 'info@niis.org'
          DEBFULLNAME: 'NIIS'
        run: |
          echo "Current disk usage: (before noble build):"
          df -h
          ./src/packages/build-deb.sh noble -release
          echo "Current disk usage: (after noble build):"
          df -h
      - name: Store deb files for system tests
        uses: actions/upload-artifact@v4
        with:
          name: debian-packages
          path: src/packages/build/ubuntu22.04/*.deb
          compression-level: 0 #No point in compressing these
      - name: Packaging and upload artifacts measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: get-measurement
          label: 'Packaging and upload artifacts'
      - name: Show Energy Results
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: display-results
          pr-comment: true
      - name: Clean up workspace #otherwise might run out of disk space in the next steps
        working-directory: ./src
        run: ./gradlew clean
      - name: Save docker images from registry
        run: |
          mkdir -p ${{ runner.temp }}/docker-images
          docker pull localhost:5000/ss-backup-manager:latest
          docker pull localhost:5000/ss-configuration-client:latest
          docker pull localhost:5000/ss-proxy:latest
          docker pull localhost:5000/ss-signer:latest
          docker pull localhost:5000/ss-monitor:latest
          docker pull localhost:5000/ss-op-monitor:latest
          docker pull localhost:5000/ss-proxy-ui-api:latest
          docker pull localhost:5000/ss-db-serverconf-init:latest
          docker pull localhost:5000/ss-db-messagelog-init:latest
          docker pull localhost:5000/ss-db-opmonitor-init:latest

          docker save -o ${{ runner.temp }}/docker-images/ss-backup-manager.tar localhost:5000/ss-backup-manager:latest
          docker save -o ${{ runner.temp }}/docker-images/ss-configuration-client.tar localhost:5000/ss-configuration-client:latest
          docker save -o ${{ runner.temp }}/docker-images/ss-proxy.tar localhost:5000/ss-proxy:latest
          docker save -o ${{ runner.temp }}/docker-images/ss-signer.tar localhost:5000/ss-signer:latest
          docker save -o ${{ runner.temp }}/docker-images/ss-monitor.tar localhost:5000/ss-monitor:latest
          docker save -o ${{ runner.temp }}/docker-images/ss-op-monitor.tar localhost:5000/ss-op-monitor:latest
          docker save -o ${{ runner.temp }}/docker-images/ss-proxy-ui-api.tar localhost:5000/ss-proxy-ui-api:latest
          docker save -o ${{ runner.temp }}/docker-images/ss-db-serverconf-init.tar localhost:5000/ss-db-serverconf-init:latest
          docker save -o ${{ runner.temp }}/docker-images/ss-db-messagelog-init.tar localhost:5000/ss-db-messagelog-init:latest
          docker save -o ${{ runner.temp }}/docker-images/ss-db-opmonitor-init.tar localhost:5000/ss-db-opmonitor-init:latest
      - name: Store docker images for other jobs
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: ${{ runner.temp }}/docker-images
  BuildAndPackageOnArm:
    name: Build and package code for arm architecture
    needs: BuildAndPackageWithUnitTests
    runs-on: ubuntu-22.04-arm
    steps:
      - name: Start Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: start-measurement
          label: 'Packaging for arm architecture'
      - name: Ensure required packages
        env:
          DEBIAN_FRONTEND: noninteractive # Less output to log
        run: sudo apt-get update && sudo apt-get install -y curl software-properties-common build-essential unzip debhelper devscripts
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/develop' }}
          gradle-home-cache-cleanup: true
          dependency-graph: generate-and-submit
          add-job-summary-as-pr-comment: always
      - name: Download workspace
        uses: pyTooling/download-artifact@v4 # https://github.com/actions/upload-artifact/issues/38
        with:
          name: workspace-for-arm
      - name: Set up measurement for arm packaging
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: get-measurement
          label: 'Set up arm packaging'
      - name: Build RHEL8 packages
        run: docker build -t rhel8 ${{ github.workspace }}/src/packages/docker/rpm-el8/ && docker run --rm -u $(id -u ${USER}):$(id -g ${USER}) -v /etc/passwd:/etc/passwd:ro -v /etc/group:/etc/group:ro -v ${{ github.workspace }}:/workspace rhel8 ./src/packages/build-rpm.sh
      - name: Build RHEL9 packages
        run: docker build -t rhel9 ${{ github.workspace }}/src/packages/docker/rpm-el9/ && docker run --rm -u $(id -u ${USER}):$(id -g ${USER}) -v /etc/passwd:/etc/passwd:ro -v /etc/group:/etc/group:ro -v ${{ github.workspace }}:/workspace rhel9 ./src/packages/build-rpm.sh
      - name: Build 22.04 (Jammy) packages
        env:
          DEBEMAIL: 'info@niis.org'
          DEBFULLNAME: 'NIIS'
        run: ./src/packages/build-deb.sh jammy -release
      - name: Build 24.04 (Noble) packages
        env:
          DEBEMAIL: 'info@niis.org'
          DEBFULLNAME: 'NIIS'
        run: ./src/packages/build-deb.sh noble -release
      - name: Store deb files for Docker dev images
        uses: actions/upload-artifact@v4
        with:
          name: debian-packages-arm
          path: src/packages/build/ubuntu22.04/*.deb
          compression-level: 0 #No point in compressing these
      - name: Measurement for arm packaging
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: get-measurement
          label: 'Packaging for arm architecture'
      - name: Show Energy Results
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: display-results
          pr-comment: true
  RunCSSystemTests:
    name: Run Central Server system tests
    needs: BuildAndPackageWithUnitTests
    runs-on: ubuntu-22.04
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Start Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: start-measurement
          label: 'Central Server system tests'
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true
      - name: Initialize docker setup
        working-directory: ./Docker/centralserver
        run: ./init_context.sh
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      - name: Download debian packages
        uses: actions/download-artifact@v4
        with:
          name: debian-packages
          path: ./Docker/centralserver/build/packages/
      - name: List docker build files
        run: ls -lah ./Docker/centralserver/build
      - name: Build CS docker image
        uses: docker/build-push-action@v6
        with:
          context: ./Docker/centralserver/
          push: true
          build-args: |
            PACKAGE_SOURCE=internal
          tags: localhost:5000/xrd-centralserver:${{ github.sha }}
      - name: Central Server test setup measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: get-measurement
          label: 'Set up Central Server tests'
      - name: Run Central Server system tests
        working-directory: ./src
        run: ./gradlew -Dorg.gradle.jvmargs=-Xmx1g :central-server:admin-service:ui-system-test:systemTest -PsystemTestCsImageName=localhost:5000/xrd-centralserver:${{ github.sha }}
      - name: Test Central Server measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: get-measurement
          label: 'Test Central Server'
      - name: Test report
        env:
          NODE_OPTIONS: '--max-old-space-size=6144'
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: Central Server system test
          path: src/central-server/admin-service/ui-system-test/build/test-results/**/TEST-*.xml
          reporter: java-junit
      - name: Upload CS screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: CS System Test screenshots
          path: src/central-server/admin-service/ui-system-test/build/reports/test-automation/selenide-failures/*.png
      - name: Upload CS report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: CS System Test report
          path: |
            src/central-server/admin-service/ui-system-test/build/allure-report/
      - name: Show Energy Results
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: display-results
          pr-comment: true
      - name: Upload GMT jsons
        uses: actions/upload-artifact@v4
        with:
          name: CS System Test GMT jsons
          path: |
            /tmp/eco-ci/lap-data.json
            /tmp/eco-ci/total-data.json
  RunSSSystemTests:
    name: Run Security Server system tests
    needs: BuildAndPackageWithUnitTests
    runs-on: ubuntu-22.04
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Start Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: start-measurement
          label: 'Security Server system tests'
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true
      - name: Download SS docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: ${{ runner.temp }}/docker-images
      - name: Load SS docker images into registry
        run: |
          for tar in ${{ runner.temp }}/docker-images/*.tar; do
            echo "Processing $tar..."
            IMAGE_ID=$(docker load -i "$tar" | awk '/Loaded image:/ {print $NF}')
            docker push "$IMAGE_ID"
          done
      - name: Security Server test setup measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: get-measurement
          label: 'Set up Security Server tests'
      - name: Run Security Server system tests
        working-directory: ./src
        run: |
          mv -f ../deployment/security-server/docker/.env.github ../deployment/security-server/docker/.env
          ./gradlew -Dorg.gradle.jvmargs=-Xmx1g :security-server:system-test:systemTest
      - name: Test Security Server measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: get-measurement
          label: 'Test Security Server'
      - name: Test report
        env:
          NODE_OPTIONS: '--max-old-space-size=6144'
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: Security Server system tests
          path: src/security-server/system-test/build/test-results/**/TEST-*.xml
          reporter: java-junit
      - name: Upload SS report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: SS System Test report
          path: |
            src/security-server/system-test/build/a2c_logs/
            src/security-server/system-test/build/allure-report/
            src/security-server/system-test/build/container-logs/
            src/security-server/system-test/build/reports/test-automation/selenide-failures/*.png

      - name: Show Energy Results
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: display-results
          pr-comment: true
  RunE2ETests:
    name: Run E2E tests
    needs: BuildAndPackageWithUnitTests
    runs-on: ubuntu-22.04
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Start Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: start-measurement
          label: 'E2E tests'
      # Setup
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      # Build Central Server
      - name: Initialize CS docker setup
        working-directory: ./Docker/centralserver
        run: ./init_context.sh
      - name: Download debian packages for CS
        uses: actions/download-artifact@v4
        with:
          name: debian-packages
          path: ./Docker/centralserver/build/packages/
      - name: Build CS docker image
        uses: docker/build-push-action@v6
        with:
          context: ./Docker/centralserver/
          push: true
          build-args: |
            PACKAGE_SOURCE=internal
          tags: localhost:5000/xrd-centralserver:${{ github.sha }}
      - name: Download SS docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: ${{ runner.temp }}/docker-images
      - name: Load SS docker images into registry
        run: |
          for tar in ${{ runner.temp }}/docker-images/*.tar; do
            echo "Processing $tar..."
            IMAGE_ID=$(docker load -i "$tar" | awk '/Loaded image:/ {print $NF}')
            docker push "$IMAGE_ID"
          done
      - name: E2E test setup measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: get-measurement
          label: 'Set up E2E tests'
      # Execute and report
      - name: Run E2E tests
        working-directory: ./src
        run: |
          mv -f ../deployment/security-server/docker/.env.github ../deployment/security-server/docker/.env
          docker network create xroad-network
          ./gradlew -Dorg.gradle.jvmargs=-Xmx1g :security-server:e2e-test:e2eTest -Pe2eTestCSImage=localhost:5000/xrd-centralserver:${{ github.sha }}
      - name: E2E test measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: get-measurement
          label: 'E2E tests'
      - name: Test report
        env:
          NODE_OPTIONS: '--max-old-space-size=6144'
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: E2E tests
          path: src/security-server/e2e-test/build/test-results/**/TEST-*.xml
          reporter: java-junit
      - name: Upload E2E report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: E2E report
          path: |
            src/security-server/e2e-test/build/allure-report/
      - name: Show Energy Results
        uses: green-coding-solutions/eco-ci-energy-estimation@v4.7
        with:
          task: display-results
          pr-comment: true
