pipeline {
    agent { label 'dev-test' }
    parameters {
        string(description: "Cluster name", name: "CLUSTER_NAME", defaultValue: "${params?.CLUSTER_NAME}")
        string(description: "Region code", name: "REGION_CODE", defaultValue: "${params?.REGION_CODE}")
        string(description: "Kubernetes version", name: "KUBERNETES_VERSION", defaultValue: "${params?.KUBERNETES_VERSION}")
        string(description: "ARN role of the cluster", name: "ROLE_ARN", defaultValue: "${params?.ROLE_ARN}")
        string(description: "AWS subnets IDs separated by comma", name: "SUBNET_IDS", defaultValue: "${params?.SUBNET_IDS}")
        string(description: "Security groups IDs separated by comma", name: "SECURITY_GROUP_IDS", defaultValue: "${params?.SECURITY_GROUP_IDS}")
        string(description: "Node group name", name: "NODEGROUP_NAME", defaultValue: "${params?.NODEGROUP_NAME}")
        string(description: "Node group minimun size", name: "NODE_MIN_SIZE", defaultValue: "${params?.NODE_MIN_SIZE}")
        string(description: "Node group maximun size", name: "NODE_MAX_SIZE", defaultValue: "${params?.NODE_MAX_SIZE}")
        string(description: "Node group desired size", name: "NODE_DESIRED_SIZE", defaultValue: "${params?.NODE_DESIRED_SIZE}")
        string(description: "Disk size in Gb", name: "DISK_SIZE", defaultValue: "${params?.DISK_SIZE}")
        string(description: "SSH key name for the node group instances", name: "SSH_KEY", defaultValue: "${params?.SSH_KEY}")
        string(description: "Node instance subnet Id", name: "NODE_SUBNET_ID", defaultValue: "${params?.NODE_SUBNET_ID}")
    }
    stages {
      stage('Create cluster') {
            steps {
                 withCredentials([usernamePassword(credentialsId: 'AWS', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'aws eks create-cluster \
                       --region ${REGION_CODE} \
                       --name ${CLUSTER_NAME} \
                       --kubernetes-version ${KUBERNETES_VERSION} \
                       --role-arn ${ROLE_ARN} \
                       --resources-vpc-config subnetIds=${SUBNET_IDS},securityGroupIds=${SECURITY_GROUP_IDS}'
                }
            }
        }
        stage('Wait until the cluster is active') {
            steps {
                 withCredentials([usernamePassword(credentialsId: 'AWS', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'aws eks wait cluster-active --name ${CLUSTER_NAME}'
                }
            }
        }

        stage('Create Node Group') {
            steps {
                 withCredentials([usernamePassword(credentialsId: 'AWS', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'aws eks create-nodegroup \
                       --cluster-name ${CLUSTER_NAME}  \
                       --scaling-config minSize=${NODE_MIN_SIZE},maxSize=${NODE_MAX_SIZE},desiredSize=${NODE_DESIRED_SIZE}  \
                       --nodegroup-name ${NODEGROUP_NAME} \
                       --subnets ${NODE_SUBNET_ID}  \
                       --node-role ${ROLE_ARN} \
                       --disk-size ${DISK_SIZE} \
                       --remote-access ec2SshKey=${SSH_KEY},sourceSecurityGroups=${SECURITY_GROUP_IDS} \
                       --tags SecurityServerSidecar=True'
                }
            }
        }
        stage('Wait until the nodegroup is active') {
            steps {
                 withCredentials([usernamePassword(credentialsId: 'AWS', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'aws eks wait nodegroup-active --cluster-name ${CLUSTER_NAME} --nodegroup-name ${NODEGROUP_NAME}'
                }
            }
        }
    }
}
